-----------------------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  /home/damiancclarke/investigacion/Activa/Twins/Log/Twin_Regressions.log
  log type:  text
 opened on:   6 May 2014, 00:24:39

. use "$Data/DHS_twins", clear

. 
. gen motherage    = agemay - age

. gen motheragesq  = motherage^2

. gen motheragecub = motherage^3

. gen mage3        = agemay^3

. 
. gen antesq = antenatal^2
(5615617 missing values generated)

. 
. replace bmi=. if bmi>50
(68238 real changes made, 68238 to missing)

. replace height=. if height>240
(56041 real changes made, 56041 to missing)

. replace height=. if height<80
(3690 real changes made, 3690 to missing)

. replace educ=. if age<6
(1408116 real changes made, 1408116 to missing)

. replace educ=. if educ>25
(0 real changes made)

. replace educf=. if educf>25
(2569 real changes made, 2569 to missing)

. replace birthspacing=. if birthspacing<8|birthspacing==999
(3107 real changes made, 3107 to missing)

. 
. gen bmi_sq=bmi*bmi
(3111628 missing values generated)

. gen height_sq=height*height
(3100566 missing values generated)

. gen underweight=1 if bmi<=18.5
(6300142 missing values generated)

. replace underweight=0 if bmi>18.5 & bmi!=.
(3188514 real changes made)

. if `sumstats'==1 save "$Data/DHS_twins_full.dta", replace
file ~/investigacion/Activa/Twins/Data/DHS_twins_full.dta saved

. 
. drop if twinfamily>2
(6757 observations deleted)

. keep if _merge==3
(2824705 observations deleted)

. 
. tab _cou, gen(_country)

   country (numeric code) |      Freq.     Percent        Cum.
--------------------------+-----------------------------------
                  Albania |      9,852        0.25        0.25
                  Armenia |     23,119        0.59        0.84
               Azerbaijan |     10,099        0.26        1.10
               Bangladesh |    138,845        3.54        4.64
                    Benin |     50,921        1.30        5.94
                  Bolivia |     90,337        2.30        8.24
                   Brazil |     26,480        0.68        8.92
             Burkina-Faso |     80,844        2.06       10.98
                  Burundi |     17,179        0.44       11.42
                 Cambodia |     78,393        2.00       13.42
                 Cameroon |     57,922        1.48       14.89
 Central-African-Republic |      8,424        0.21       15.11
                     Chad |     31,870        0.81       15.92
                 Colombia |    153,340        3.91       19.83
                  Comoros |      4,405        0.11       19.94
        Congo-Brazzaville |     24,200        0.62       20.56
Congo-Democratic-Republic |     17,942        0.46       21.02
            Cote-d-Ivoire |     37,865        0.97       21.98
       Dominican-Republic |     85,859        2.19       24.17
                    Egypt |    190,129        4.85       29.02
                 Ethiopia |     77,034        1.96       30.99
                    Gabon |     19,164        0.49       31.47
                    Ghana |     29,402        0.75       32.22
                Guatemala |     26,389        0.67       32.90
                   Guinea |     26,887        0.69       33.58
                   Guyana |      9,787        0.25       33.83
                    Haiti |     54,833        1.40       35.23
                 Honduras |     64,405        1.64       36.87
                    India |    494,736       12.62       49.49
                Indonesia |    370,438        9.45       58.94
                   Jordan |    104,264        2.66       61.60
               Kazakhstan |     10,902        0.28       61.87
                    Kenya |     41,113        1.05       62.92
          Kyrgyz-Republic |      6,260        0.16       63.08
                  Lesotho |     19,628        0.50       63.58
                  Liberia |      9,946        0.25       63.84
               Madagascar |     66,478        1.70       65.53
                   Malawi |     94,897        2.42       67.95
                 Maldives |     11,367        0.29       68.24
                     Mali |     81,284        2.07       70.31
                  Moldova |      7,146        0.18       70.50
                  Morocco |     38,863        0.99       71.49
               Mozambique |     51,801        1.32       72.81
                  Namibia |     22,202        0.57       73.38
                    Nepal |     62,324        1.59       74.96
                Nicaragua |     45,936        1.17       76.14
                    Niger |     47,656        1.22       77.35
                  Nigeria |     94,681        2.41       79.77
                 Pakistan |     49,895        1.27       81.04
                 Paraguay |      9,839        0.25       81.29
                     Peru |    109,120        2.78       84.07
              Philippines |     92,995        2.37       86.44
                   Rwanda |     72,571        1.85       88.29
    Sao-Tome-and-Principe |      4,549        0.12       88.41
                  Senegal |     74,161        1.89       90.30
             Sierra-Leone |     10,632        0.27       90.57
             South-Africa |     12,962        0.33       90.90
                Swaziland |      5,874        0.15       91.05
                 Tanzania |     95,811        2.44       93.50
                     Togo |     11,893        0.30       93.80
                   Turkey |     37,920        0.97       94.77
                   Uganda |     52,893        1.35       96.12
                  Ukraine |      6,037        0.15       96.27
               Uzbekistan |      7,962        0.20       96.47
                  Vietnam |     25,392        0.65       97.12
                    Yemen |     20,806        0.53       97.65
                   Zambia |     52,383        1.34       98.99
                 Zimbabwe |     39,743        1.01      100.00
--------------------------+-----------------------------------
                    Total |  3,921,286      100.00

. tab year_birth, gen(_yb)

   Mother's |
    year of |
      birth |      Freq.     Percent        Cum.
------------+-----------------------------------
       1936 |          2        0.00        0.00
       1937 |        144        0.00        0.00
       1938 |        100        0.00        0.01
       1939 |        135        0.00        0.01
       1940 |        483        0.01        0.02
       1941 |      2,362        0.06        0.08
       1942 |      5,898        0.15        0.23
       1943 |      9,495        0.24        0.47
       1944 |     12,172        0.31        0.79
       1945 |     18,005        0.46        1.24
       1946 |     20,965        0.53        1.78
       1947 |     25,219        0.64        2.42
       1948 |     29,939        0.76        3.19
       1949 |     35,612        0.91        4.09
       1950 |     47,380        1.21        5.30
       1951 |     46,309        1.18        6.48
       1952 |     59,824        1.53        8.01
       1953 |     61,353        1.56        9.57
       1954 |     72,246        1.84       11.42
       1955 |     80,632        2.06       13.47
       1956 |     89,398        2.28       15.75
       1957 |     98,399        2.51       18.26
       1958 |    109,060        2.78       21.04
       1959 |    113,116        2.88       23.93
       1960 |    138,348        3.53       27.46
       1961 |    121,382        3.10       30.55
       1962 |    145,480        3.71       34.26
       1963 |    143,180        3.65       37.91
       1964 |    146,013        3.72       41.64
       1965 |    151,848        3.87       45.51
       1966 |    143,507        3.66       49.17
       1967 |    137,996        3.52       52.69
       1968 |    149,392        3.81       56.50
       1969 |    135,645        3.46       59.96
       1970 |    151,622        3.87       63.82
       1971 |    125,341        3.20       67.02
       1972 |    133,678        3.41       70.43
       1973 |    122,687        3.13       73.56
       1974 |    111,645        2.85       76.40
       1975 |    113,008        2.88       79.29
       1976 |    102,695        2.62       81.90
       1977 |     91,007        2.32       84.23
       1978 |     89,800        2.29       86.52
       1979 |     78,236        2.00       88.51
       1980 |     81,442        2.08       90.59
       1981 |     62,749        1.60       92.19
       1982 |     60,517        1.54       93.73
       1983 |     51,968        1.33       95.06
       1984 |     42,771        1.09       96.15
       1985 |     37,072        0.95       97.09
       1986 |     30,893        0.79       97.88
       1987 |     22,241        0.57       98.45
       1988 |     19,675        0.50       98.95
       1989 |     12,831        0.33       99.28
       1990 |     10,953        0.28       99.56
       1991 |      7,160        0.18       99.74
       1992 |      5,037        0.13       99.87
       1993 |      2,793        0.07       99.94
       1994 |      1,482        0.04       99.98
       1995 |        674        0.02       99.99
       1996 |        245        0.01      100.00
       1997 |         25        0.00      100.00
------------+-----------------------------------
      Total |  3,921,286      100.00

. tab age, gen(_age)

Child's age |
   in years |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |    278,322        7.10        7.10
          1 |    249,311        6.36       13.46
          2 |    236,581        6.03       19.49
          3 |    233,634        5.96       25.45
          4 |    226,103        5.77       31.21
          5 |    216,076        5.51       36.72
          6 |    231,904        5.91       42.64
          7 |    211,026        5.38       48.02
          8 |    208,222        5.31       53.33
          9 |    182,900        4.66       57.99
         10 |    202,331        5.16       63.15
         11 |    161,842        4.13       67.28
         12 |    182,634        4.66       71.94
         13 |    159,152        4.06       76.00
         14 |    150,462        3.84       79.83
         15 |    133,418        3.40       83.24
         16 |    119,198        3.04       86.28
         17 |     99,881        2.55       88.82
         18 |     96,338        2.46       91.28
         19 |     66,765        1.70       92.98
         20 |     68,469        1.75       94.73
         21 |     44,762        1.14       95.87
         22 |     42,741        1.09       96.96
         23 |     30,728        0.78       97.74
         24 |     24,235        0.62       98.36
         25 |     22,087        0.56       98.92
         26 |     13,366        0.34       99.27
         27 |      9,762        0.25       99.51
         28 |      7,419        0.19       99.70
         29 |      3,902        0.10       99.80
         30 |      4,172        0.11       99.91
         31 |      1,380        0.04       99.94
         32 |      1,096        0.03       99.97
         33 |        494        0.01       99.99
         34 |        262        0.01       99.99
         35 |        187        0.00      100.00
         36 |         62        0.00      100.00
         37 |         29        0.00      100.00
         38 |         13        0.00      100.00
         39 |          5        0.00      100.00
         40 |          9        0.00      100.00
         41 |          2        0.00      100.00
         42 |          3        0.00      100.00
         44 |          1        0.00      100.00
------------+-----------------------------------
      Total |  3,921,286      100.00

. tab contracep_intent, gen(_contracep)

contraceptive use and intention |      Freq.     Percent        Cum.
--------------------------------+-----------------------------------
            using modern method |  1,404,428       36.16       36.16
       using traditional method |    318,282        8.20       44.36
non-user - intends to use later |    940,878       24.23       68.58
         does not intend to use |  1,220,152       31.42      100.00
                  never had sex |          1        0.00      100.00
--------------------------------+-----------------------------------
                          Total |  3,883,741      100.00

. tab bord, gen(_bord)

    Child's |
birth order |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |  1,003,729       25.60       25.60
          2 |    863,495       22.02       47.62
          3 |    651,989       16.63       64.24
          4 |    465,964       11.88       76.13
          5 |    329,421        8.40       84.53
          6 |    230,147        5.87       90.40
          7 |    154,868        3.95       94.35
          8 |     99,667        2.54       96.89
          9 |     59,588        1.52       98.41
         10 |     33,380        0.85       99.26
         11 |     16,615        0.42       99.68
         12 |      7,609        0.19       99.88
         13 |      2,876        0.07       99.95
         14 |      1,169        0.03       99.98
         15 |        475        0.01       99.99
         16 |        198        0.01      100.00
         17 |         60        0.00      100.00
         18 |         19        0.00      100.00
         19 |         10        0.00      100.00
         20 |          6        0.00      100.00
         21 |          1        0.00      100.00
------------+-----------------------------------
      Total |  3,921,286      100.00

. local base malec _country* _yb* _age* _contracep* `add'

. 
. foreach ado in ivreg2 outreg2 estout ranktest mat2txt {
  2.         cap which `ado'
  3.         if _rc!=0 ssc install `ado'
  4. }

. 
. *bys desiredfert_region: egen antenatalregion=mean(antenatal)
. *rename antenatal antenatal_ind
. *rename antenatalregion antenatal
. 
. *******************************************************************************
. *** (2) Summary Stats
. *******************************************************************************
. if `sumstats'==1 {
. 
.         if c(os)=="Windows" local format png
.         else if c(os)=="Unix" local format eps
.         ***************************************************************************
.         *** (2a) Tables
.         ***************************************************************************
.         * (A) By twins
.         local opts cells("count mean sd min max")
.         /*
>         gen cat="Low Inc, Singleton" if twind==0 & inc_status=="L"
>         replace cat="Low Inc, Twin" if twind==1 & inc_status=="L"
>         replace cat="Mid Inc, Single" if twind==0 & inc_status!="L"
>         replace cat="Mid Inc, Twin" if twind==1 & inc_status!="L"
>         encode cat, gen(catnum)
>         
>         local numkids "Number of Children"
>         local nummothers "Number of Mothers"
>         local numcountry "Number of Countries"
>         foreach num of numlist 1(1)4 {
>                 cap drop count
>                 gen count = 1
>                 replace count=. if catnum!=`num'
>                 foreach var of local sumstats {
>                         replace count=. if `var'==.
>                 }
>                 count if count==1
>                 local kk = "`: display %9.0fc r(N)'"
> 
>                 local numkids "`numkids' `sep'" "`kk'"
> 
>                 bys id: gen n=_n
>                 count if count==1&n==1
>                 local mm = "`: display %9.0fc r(N)'"
>                 local nummothers "`nummothers' `sep'" "`mm'"
>                 drop n
> 
>                 bys _cou: gen n=_n
>                 count if count==1&n==1
>                 if `num'==1|`num'==3 {
>                         local numcountry "`numcountry' `sep' `r(N)'`sep'`r(N)' "
>                 }
>                 drop n
>         }
> 
>         count
>         local kidcount = "`: display %9.0fc r(N)'"
>         sum twind
>         scalar at = "`: display %7.4f r(mean)'"
>         scalar as = "`: display %7.4f r(sd)'"   
>         sum twind if inc_status=="L"
>         scalar lt = "`: display %7.4f r(mean)'"
>         scalar ls = "`: display %7.4f r(sd)'"
>         sum twind if inc_status!="L"
>         scalar mt = "`: display %7.4f r(mean)'"
>         scalar ms = "`: display %7.4f r(sd)'"
> 
>         sum bord if twind==1
>         scalar abm = "`: display %7.3f r(mean)'"
>         scalar abs = "`: display %7.3f r(sd)'"
>         sum bord if twind==1 & inc_status=="L"
>         scalar lbm = "`: display %7.3f r(mean)'"
>         scalar lbs = "`: display %7.3f r(sd)'"
>         sum bord if twind==1 &  inc_status!="L"
>         scalar mbm = "`: display %7.3f r(mean)'"
>         scalar mbs = "`: display %7.3f r(sd)'"
> 
> 
>         preserve
>         gen exceedfam=idealfam==1
>         collapse $sumstatsM, by(id cat)
>         count
>         local mothercount = "`: display %9.0fc r(N)'"
> 
>         file open resfile using "$Tables/Summary/Count.txt", write replace
>         file write resfile "`numcountry' & 68 \\" _n
>         file write resfile "`numkids' & `kidcount' \\" _n
>         file write resfile "`nummothers' & `mothercount' \\" _n
>         file write resfile "Fraction Twin & \multicolumn{2}{c}{ `=scalar(lt)'" ///
>           "}& \multicolumn{2}{c}{ `=scalar(mt)' } & `=scalar(at)'\\" _n
>         file write resfile "& \multicolumn{2}{c}{(`=scalar(ls)')" ///
>           "}& \multicolumn{2}{c}{(`=scalar(ms)')} & (`=scalar(as)')\\" _n
>         file write resfile "Birth Order Twin & \multicolumn{2}{c}{ `=scalar(lbm)'" ///
>           "}& \multicolumn{2}{c}{ `=scalar(mbm)' }& `=scalar(abm)'\\" _n
>         file write resfile "& \multicolumn{2}{c}{(`=scalar(lbs)')" ///
>           "}& \multicolumn{2}{c}{(`=scalar(mbs)')}& (`=scalar(abs)')\\" _n
>         file write resfile "`mothercount'"
>         file close resfile
>         
>         estpost tabstat $sumstatsM, by(cat) statistics(mean sd) listwise ///
>          columns(statistics)
>         esttab using "$Tables/Summary/`Sum'.txt", replace main(mean) aux(sd) /*
>         */ nostar unstack noobs nonote nomtitle nonumber
>         restore
> 
>         preserve
>         decode _cou, gen(WBcountry)
>         gen colvar=inc_status=="L"
>         collapse colvar, by(WBcountry _year)
>         gen income="Low" if colvar==1
>         replace income="Middle" if colvar==0
>         drop colvar
>         order WBcountry income _year
>         sort WBc _year
>         outsheet using "$Tables/Summary/Countries.csv", delimit(;) nonames replace
>         restore
>         */
.         preserve
.         use "$Data/DHS_twins_full.dta", clear
.         gen cat="Low Inc, Singleton" if twind==0 & inc_status=="L"
(2831387 missing values generated)
.         replace cat="Low Inc, Twin" if twind==1 & inc_status=="L"
(98863 real changes made)
.         replace cat="Mid Inc, Single" if twind==0 & inc_status!="L"
(2675884 real changes made)
.         replace cat="Mid Inc, Twin" if twind==1 & inc_status!="L"
(56640 real changes made)
.         encode cat, gen(catnum)
.         estpost tabstat $sumstatsC, by(cat) statistics(mean sd) listwise ///
>          columns(statistics)

Summary statistics: mean sd
     for variables: educ school_zscore noeduc infantmortality childmortality
  by categories of: cat

         cat |   e(mean)      e(sd) 
-------------+----------------------
Low Inc, S~n |                      
        educ |  3.660039   3.576488 
school_zsc~e | -.0084276   1.001491 
      noeduc |  .2065683   .4048432 
infantmort~y |  .0157899   .1246618 
childmorta~y |  .0239234   .1528108 
-------------+----------------------
Low Inc, T~n |                      
        educ |  3.203751   3.293244 
school_zsc~e | -.0156318    .963431 
      noeduc |  .2221156   .4156775 
infantmort~y |  .0916903   .2885946 
childmorta~y |  .1077863    .310117 
-------------+----------------------
Mid Inc, S~e |                      
        educ |  5.444587   3.867097 
school_zsc~e |  .0119413   .9979765 
      noeduc |   .064855     .24627 
infantmort~y |   .009464   .0968216 
childmorta~y |  .0122249   .1098883 
-------------+----------------------
Mid Inc, T~n |                      
        educ |  5.042507   3.759832 
school_zsc~e | -.0427581   .9867795 
      noeduc |  .0785874   .2691017 
infantmort~y |  .0496993   .2173294 
childmorta~y |  .0534725   .2249803 
-------------+----------------------
Total        |                      
        educ |  4.446445   3.810359 
school_zsc~e |  .0001443   .9995148 
      noeduc |  .1437655   .3508518 
infantmort~y |  .0140677   .1177703 
childmorta~y |  .0199004   .1396579 
.         esttab using "$Tables/Summary/`SumC'.txt", replace main(mean) aux(sd) /*
>         */ nostar unstack noobs nonote nomtitle nonumber
(note: file /home/damiancclarke/investigacion/Activa/Twins/Results/Outreg/Summary/SummaryChild.txt not found)
(output written to ~/investigacion/Activa/Twins/Results/Outreg/Summary/SummaryChild.txt)
.         clear
.         restore
.         ***************************************************************************
.         *** (2b) Graphical
.         *** graph 1: total births by family type (twins vs non-twins)
.         *** graph 2: total births by family type for families who exceed desired
.         *** graph 3: Proportion of twins by birth order
.         *** graph 4: Desired family size
.         *** graphs 5-7: Desired family size by mother's characteristics
.         ***************************************************************************
.         if `graphs'==1 {
. 
.         twoway kdensity fert if twinfamily>0&twinfamily!=., lpattern(dash) bw(2) || ///
>           kdensity fert if twinfamily==0, bw(2) scheme(s1color) ytitle("Density") ///
>           legend(label(1 "Twin Family") label(2 "Singleton Family")) ///
>           title("Total births by Family Type") xtitle("total children ever born") 
.         graph save "$Graphs/`famsize'", replace
.         graph export "$Graphs/`famsize'.`format'", as(`format') replace
. 
. 
.         twoway kdensity fert if twinfamily>0&twinfamily!=. & fert > idealnumkids, ///
>           bw(2) lpattern(dash) || kdensity fert if twinfamily==0 & ///
>           fert > idealnumkids & twin_bord >= idealnumkids, bw(2) scheme(s1color) ///
>           legend(label(1 "Twin Family") label(2 "Singleton Family")) ///
>           ytitle("Density") title("Total births by Family Type") ///
>           xtitle("total children ever born") ///
>           subtitle("For families who exceed desired family size")
.         graph save "$Graphs/`famsize_e'", replace
.         graph export "$Graphs/`famsize_e'.`format'", as(`format') replace
. 
.         
.         local note1 "Single births are 1-frac(twins). "
.         local note2 "Total fraction of twins is represented by the solid line."
.         local gnote "`note1' `note2'"
.         sum twind
.         local twinave=r(mean)   
.         preserve
.         collapse twind [pw=sweight], by(bord)
.         gen twinave=`twinave'   
.         line twind bord if bord<11, lpattern(dash) title("Twinning by birth order") ///
>           ytitle("Fraction twins") xtitle("Birth Order") yline(0.0189) ///
>           note(`gnote') scheme(s1color)
.         graph save "$Graphs/`twinbord'", replace
.         graph export "$Graphs/`twinbord'.`format'", as(`format') replace
. 
.         twoway bar twind bord if bord<11 || ///
>         line twinave bord if bord<11, title("Twinning by birth order") ///
>           ytitle("Fraction twins") xtitle("Birth Order")  ///
>           note(`gnote') scheme(s1color)
.         graph save "$Graphs/`twinbord'_hist", replace
.         graph export "$Graphs/`twinbord'_hist.`format'", as(`format') replace
.         restore
. 
.         
.         local n1 "Total sample of families is 1,586,899.  2.61% of families report "
.         local n2 "'up to god', and 4.39% provide"
.         local n3 "a non-numeric response. These are omitted here."      
.         preserve
.         collapse idealnumkids [pw=sweight], by(id)
.         gen idealnum=idealnumkids if idealnumkids<=9
.         replace idealnum=9 if idealnumkids>10 & idealnumkids<=30
.         lab def n 0 "0" 1 "1" 2 "2" 3 "3" 4 "4" 5 "5" 6 "6" 7 "7" 8 "8" 9 "9+"
.         lab val idealnum n
.         hist idealnum,  note("`n1' `n2'" "`n3'") frac scheme(s1color) ///
>           xtitle("Ideal Family Size") title("Self Reported Ideal Family Size") ///
>           xla(0/9, valuelabel) bcolor(navy)
.         graph save "$Graphs/`idealfam'", replace
.         graph export "$Graphs/`idealfam'.`format'", as(`format') replace
.         restore
. 
.         foreach c of varlist /*agemay agefirstbirth*/ fert {
  2.                 preserve
  3.                 if `"`c'"'=="agemay" {
  4.                         local cond agemay>=15&agemay<=45
  5.                         local char "Age of mother at time of question"
  6.                 }
  7.                 else if `"`c'"'=="agefirstbirth" {
  8.                         local cond agefirstbirth>=15&agefirstbirth<45
  9.                         local char "Age of Mother at First birth"
 10.                 }
 11.                 else if `"`c'"'=="fert"{
 12.                         local cond fert<=10
 13.                         local char "Total births at time of question"
 14.                 }
 15.                 bys id: gen num=_n
 16.                 keep if num==1
 17.                 collapse idealnumkids [pw=sweight], by(`c')
 18.                 if `"`c'"'=="fert" {
 19.                         sort idealnumkids
 20.                         gen vert=fert
 21.                         twoway line idealnumkids `c' if `cond' || line vert `c' if `cond', ///
>                         lpattern(dash) lcolor(black) title("Ideal Family Size by `char'")  ///
>                         scheme(s1color) ytitle("Average Desired Family Size") ///
>                         legend(label(1 "Ideal Number of Kids") label(2 "45 degrees")) ///         
>                         xtitle("`char'")
 22.                 }               
 23.                 else {  
 24.                         line idealnumkids `c' if `cond', title("Ideal Family Size by `char'") ///
>                         scheme(s1color) xtitle("`char'") ytitle("Average Desired Family Size")
 25.                 }
 26.            graph save "$Graphs/idealfam_`c'", replace
 27.            graph export "$Graphs/idealfam_`c'.`format'", as(`format') replace
 28.                 restore
 29.         }
.         }
. }

. 
. if `sumstats2'==1 {
. 
.         *****************************************************************************
.         *** (2d) Descriptive of desired
.         *****************************************************************************
.         estpost tab idealfam `cond'
.         esttab using "$Tables/Summary/Ideal.xls", cells("b pct") replace
.         estpost tab idealfam `cond'&twinfam==0
.         esttab using "$Tables/Summary/Ideal.xls", cells("b pct") append
.         estpost tab idealfam `cond'&twinfam>=1
.         esttab using "$Tables/Summary/Ideal.xls", cells("b pct") append
.         foreach num in `gplus' {
  2.                 estpost tab idealnumkids `cond'&`num'_plus==1&twin_`num'_fam==0
  3.                 esttab using "$Tables/Summary/Ideal.xls", cells("b pct") append
  4. 
.                 estpost tab idealnumkids `cond'&`num'_plus==1&twin_`num'_fam==1
  5.                 esttab using "$Tables/Summary/Ideal.xls", cells("b pct") append
  6.         }
. 
.         local t=2       
.         foreach n in `gplus' {
  2.                 gen threshold`n'=(twin_`n'_fam==1 & idealnumkids==`t')
  3.                 replace threshold`n'=. if twin_`n'_fam==0
  4.                 local ++t
  5.         }
.         gen threshold2_5=1 if thresholdtwo==1|thresholdthree==1|thresholdfour==1|/*
>         */thresholdfive==1
.         replace threshold2_5=0 if thresholdtwo==0|thresholdthree==0|/*
>         */thresholdfour==0|thresholdfive==0
. 
.         preserve
. 
.         gen inclevel="L" if inc_status=="L"
.         replace inclevel="M" if inc_status=="LM"|inc_status=="UM"
.         keep threshold* id inclevel
.         collapse threshold*, by(id inclevel)
.         
.         estpost tabstat threshold2_5 thresholdt* thresholdfour thresholdfive, /*
>         */ by(inclevel) statistics(mean sd count) columns(statistics)
.         mat counts = e(count)
. 
.         esttab using "$Tables/Summary/Threshold.txt", replace main(mean) aux(sd) /*
>         */ nostar unstack nonote nomtitle nonumber
.         esttab matrix(counts) using "$Tables/Summary/Threshold.txt", append
.         
.         restore
.         
.    *****************************************************************************
.         *** (2e) Descriptive of maternal health
.         *****************************************************************************   
.         if `graphs2'==1 {
.                 preserve
.                 collapse height weightk bmi [pw=sweight] `cond', by(id)
.                 hist weightk if weightk>30&weightk<200, frac scheme(s1color) ///
>                   xtitle("Weight in kg") title("Mother's Weight at time of Survey")
.                 graph export "$Graphs/MotherWeight.eps", as(eps) replace
.                 hist height, frac scheme(s1color) ///
>                   xtitle("Height in cm") title("Mother's Height at time of Survey")
.                 graph export "$Graphs/MotherHeight.eps", as(eps) replace
.                 hist bmi, frac scheme(s1color) ///
>                   xtitle("BMI") title("Mother's BMI at time of Survey") ///
>                   note("BMI is experessed as weight in kg squared/height in km")
.                 graph export "$Graphs/MotherBMI.eps", as(eps) replace
.                 restore
.         }       
. 
.         gen lowheight=height<157.48
.         replace lowheight=. if height==.
.         gen lowweight=bmi<18.5
.         replace lowweight=. if bmi==.
.         
.         estpost tab lowheight `cond'
.         esttab using "$Tables/Summary/Health.xls", cells("b pct") replace
.         estpost tab lowweight `cond'
.         esttab using "$Tables/Summary/Health.xls", cells("b pct") append
. }

. 
. if `trends'==1 {
.         cap drop income
.         gen income="low" if inc_status=="L"
.         replace income="mid" if inc_status!="L"
. 
.         foreach inc in all low mid {
  2.                 if "`inc'"=="all" local cex
  3.                 else if "`inc'"=="low"|"`inc'"=="mid" local cex &income=="`inc'"        
  4.                 **************************************************************************
.                 *** (2f) Trends in education/fertility
.                 **************************************************************************
.                 preserve
  5.                 keep `cond'&age>15`cex'
  6.                 collapse educ `w', by(child_yob)
  7.                 sort child_yob
  8.                 twoway line educ child_yob, /* 
>                 */ title("Average years of Education by Birth Cohort") scheme(s1color) /*
>                 */ xtitle("DHS Birth Cohort") ytitle("Years of Education")
  9.                 graph export "$Graphs/eductrend_kids_`inc'.eps", as(eps) replace
 10.                 restore
 11. 
.                 preserve
 12.                 keep `cond'`cex'
 13.                 bys id: gen keepcrit=_n
 14.                 keep if keepcrit==1
 15.                 collapse educf `w', by(year_birth)
 16.                 sort year_birth
 17.                 twoway line educf year_birth if year_birth>=1940&year_birth<1997, /* 
>                 */ title("Average years of Education by Birth Cohort") scheme(s1color) /*
>                 */ xtitle("DHS Birth Cohort") ytitle("Years of Education")
 18.                 graph export "$Graphs/eductrend_`inc'.eps", as(eps) replace
 19.                 restore
 20. 
.                 
.                 foreach aa of numlist 0 35 {
 21.                         if `aa'==0 local title "Fertility (All women)"
 22.                         if `aa'==35 local title "Fertility (Women aged 35+)"
 23.                         preserve
 24.                         keep `cond'&agemay>`aa'`cex'
 25.                         bys id: gen keepcrit=_n
 26.                         keep if keepcrit==1
 27.                         collapse fert idealnumkids `w', by(year_birth)
 28.                         sort year_birth
 29.                         twoway line fert year_bi, lpattern(dash) || line idealnumkids year_birth, /*
>                         */ scheme(s1color) legend(label(1 "Fertility per Woman") /*
>                         */ label(2 "Desired Fertility")) title(`title') ytitle("Births per Woman")
 30.                         graph export "$Graphs/ferttrend_`aa'_`inc'.eps", as(eps) replace
 31.                         restore
 32.                 }
 33.         }
. }

. 
. 
. ********************************************************************************
. **** (3) Twin predict regressions
. ********************************************************************************
. if `twin'== 1 {
.         local out "$Tables/Twin/`TwinPred'_`births'.xls"
.         fvset base 1 _cou
.         fvset base 1 child_yob
.         
.         eststo: reg twind100 $twinpredict `wt', `se'
. 
.         foreach inc in =="L" !="L"  {
  2.                 eststo: reg twind100 $twinpredict `wt' if inc_status`inc', `se'
  3.         }
.         
.         local cond1 child_yob>1989
.         local cond2 child_yob<=1989
. 
.         foreach condtn in cond1 cond2 {
  2.                 eststo: reg twind100 $twinpredict `wt' if ``condtn'', `se'
  3.         }
. 
.         eststo: reg twind100 $twinpredict /*antenatal*/ prenate* `wt', `se'
. 
.         estout est1 est2 est3 est4 est5 est6 using `out', keep($twinout /*ante**/ pre*) ///
>           title("Probability of Giving Birth to Twins (DHS)") ///
>           varlabels(motherage "Age" motheragesq "Age Squared"  agefirstbirth ///
>           "Age First Birth" educf "Education (years)" educfyrs_sq  ///
>           "Education squared" height "Height" bmi "BMI") `estopt' replace ///
>           note("Notes: All specifications include a full set of year of birth and" ///
>           " country dummies, and are estimated as linear probability models. " ///
>           "Twin is multiplied by 100 for presentation.  Height is measured in cm" ///
>           " and BMI is weight in kg divided by height in metres squared. l" ///
>           " Prenatal care variables are only recoreded for recent births.  As" ///
>           " such, column (6) is estimated only for that subset of births where " ///
>           "these observations are made.")
. 
.         estimates clear
.         *****************************************************************************
.    **** (3a) Non-linear health
.    *****************************************************************************
.         local out "$Tables/Twin/`TwinPred'_alt.xls"
.         fvset base 1 _cou
.         fvset base 1 child_yob
. 
.         eststo: reg twind100 $twinpredict bmi_sq height_sq `wt', `se'
.         foreach inc in =="L" !="L"  {
  2.                 eststo: reg twind100 $twinpredict bmi_sq height_sq `wt' if /*
>                 */ inc_status`inc', `se'
  3.         }
.         estout est1 est2 est3 using `out', ///
>           keep($twinout bmi_sq height_sq) ///
>           title("Probability of Giving Birth to Twins (DHS)") ///
>           varlabels(motherage "Age" motheragesq "Age Squared"  agefirstbirth ///
>           "Age First Birth" educf "Education (years)" educfyrs_sq  ///
>           "Education squared" height "Height" bmi "BMI" bmi_sq "BMI squared" ///
>           height_sq "height squared") `estopt' replace
. 
.         estimates clear
.         *****************************************************************************
.    **** (3b) Z-scores
.    *****************************************************************************
.         local out "$Tables/Twin/`TwinPred'_Z.xls"
.         fvset base 1 _cou
.         fvset base 1 child_yob
.         foreach var of varlist educf height bmi {
  2.                 egen `var'_sd=sd(`var')
  3.                 egen `var'_mean=mean(`var')     
  4.                 gen Z`var'=(`var'-`var'_mean)/`var'_sd
  5.                 drop `var'_sd `var'_mean
  6.         }
. 
.         eststo: reg twind motherage motheragesq agefirstbirth Zeducf Zbmi Zheight /*
>         */ i.child_yob i.bord `wt', `se'
. 
.         drop Zbmi Zheight Zeducf
.         foreach var of varlist educf height bmi {
  2.                 bys _cou: egen `var'_sd=sd(`var')
  3.                 bys _cou: egen `var'_mean=mean(`var')   
  4.                 gen Z`var'=(`var'-`var'_mean)/`var'_sd
  5.                 drop `var'_sd `var'_mean
  6.         }
.         eststo: reg twind motherage motheragesq agefirstbirth Zeducf Zbmi Zheight /*
>         */ i.child_yob i.bord `wt', `se'
.         
.         estout est1 est2 using `out', keep(motherage motheragesq agefirstbirth ///
>           Zeducf Zbmi Zheight) title("Probability of Giving Birth to Twins (DHS)") ///
>           varlabels(motherage "Age" motheragesq "Age Squared"  agefirstbirth ///
>           "Age First Birth" Zeducf "Education (Z-score)" educfyrs_sq  ///
>           "Education squared" height "Height" bmi "BMI" bmi_sq "BMI squared" ///
>           height_sq "height squared") `estopt' replace
.         estimates clear
. }

. 
. ********************************************************************************
. **** (4) Simple OLS of Q-Q (can then apply Altonji)
. ********************************************************************************
. if `ols'==1 {
.         *cap rm "$Results/Outreg/OLS/QQ_ols_`births'.xls"
.         *cap rm "$Results/Outreg/OLS/QQ_ols_`births'.txt"
.         local out "$Results/Outreg/OLS/QQ_ols_`births'.xls"
. 
.         gen desiredbirth=bord<=idealnumkids
.         gen fertXdesired=fert*desiredbirth
.         /*
>         foreach y of varlist $outcomes {
>                 qui reg `y' fert `base' $age  $S $H [pw=sweight], `se'
>                 reg `y' fert `base' $age [pw=sweight] if e(sample)==1, `se'
>                 outreg2 fert $age using `out', append
>                 reg `y' fert `base' $age $S [pw=sweight] if e(sample)==1, `se'
>                 outreg2 fert $age $S using `out', append
>                 reg `y' fert `base' $age $S $H [pw=sweight], `se'
>                 outreg2 fert $age $S $H using `out', excel append
>                 reg `y' fert fertXdesired `base' $age $S $H [pw=sweight], `se'
>                 outreg2 fert* $age $S $H using `out', excel append
> 
>         }
>         */
.         cap drop income
.         gen income="low" if inc_status=="L"
.         replace income="mid" if inc_status!="L"
. 
.         foreach inc in low mid {
  2.                 foreach y of varlist $outcomes {
  3.                         qui reg `y' fert `base' $age $S $H if income==`"`inc'"', `se'
  4.                         reg `y' fert `base' $age [pw=sweight] if income==`"`inc'"'&e(sample)/*
>                         */, `se'
  5.                         outreg2 fert $age using `out', excel append
  6. 
.                         reg `y' fert `base' $age $S [pw=sweight] if income==`"`inc'"'&e(sample),/*
>                         */ `se'
  7.                         outreg2 fert $age $S using `out', excel append
  8. 
.                         reg `y' fert `base' $age $S $H [pw=sweight] if income==`"`inc'"', `se'
  9.                         outreg2 fert $age $S $H using `out', excel append
 10. 
.                         reg `y' fert fertXdesired `base' $age $S $H [pw=sweight] /*
>                         */ if income==`"`inc'"', `se'
 11.                         outreg2 fert* $age $S $H using `out', excel append
 12. 
.                 }
 13.         }
. }

. 
. ********************************************************************************
. **** (5) IV (using twin at order n), subsequent inclusion of twin predictors
. ********************************************************************************
. if `IV'==1 {
.         local n1=1
.         local n2=2
.         local n3=3
.         local n4=4
.         local estimates
.         local firststage
. 
.         foreach n in `gplus' {
  2.                 local c  `cond'&`n'_plus==1
  3.                 local ce `cond'&`n'_plus==1&e(sample)
  4.                 foreach y of varlist $outcomes {
  5.                         eststo: ivreg2 `y' `base' $age $S $HP (fert=twin_`n'_fam) `wt' `c', /*
>                         */ `se' savefirst savefp(f`n4')
  6.                         eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' `c', /*
>                         */ `se' savefirst savefp(f`n3')
  7.                         eststo: ivreg2 `y' `base' $age $S (fert=twin_`n'_fam) `wt' `ce',   /*
>                         */ `se' savefirst savefp(f`n2')
  8.                         eststo: ivreg2 `y' `base' (fert=twin_`n'_fam) `wt' `ce',           /*
>                         */ `se' savefirst savefp(f`n1')
  9. 
.                         local estimates `estimates' est`n4' est`n3' est`n2' est`n1' 
 10.                         local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert f`n4'fert
 11.                         local n1=`n1'+4
 12.                         local n2=`n2'+4
 13.                         local n3=`n3'+4
 14.                         local n4=`n4'+4
 15.                 }
 16.         }
. 
.         estout `estimates' using "$Tables/IV/`IVb'_`births'.xls", replace ///
>         keep(fert malec $age $S $H) `estopt' `varlab'
. 
.         estout `firststage' using "$Tables/IV/`IVb1'_`births'.xls", replace ///
>         keep(twin_* malec $age $S $H) `estopt' `varlab' 
.         
.         estimates clear
. }

. 
. ********************************************************************************
. **** (5b) IV with before and after 1984
. ********************************************************************************
. if `IVtime'==1 {
.         foreach time in before after {
  2. 
.                 local n1=1
  3.                 local n2=2
  4.                 local n3=3
  5.                 local estimates
  6.                 local firststage
  7. 
.                 if `"`time'"'=="before" local newy child_yob<=1984
  8.                 else if `"`time'"'=="after" local newy child_yob>1984 
  9.                 
.                 foreach n in `gplus' {
 10.                         local c  `cond'&`n'_plus==1&`newy'
 11.                         local ce `cond'&`n'_plus==1&`newy'&e(sample)
 12.                         foreach y of varlist $outcomes {
 13.                                 eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' /*
>                                 */ `c',  `se' savefirst savefp(f`n3')
 14.                                 eststo: ivreg2 `y' `base' $age $S (fert=twin_`n'_fam) `wt'    /*
>                                 */ `ce', `se' savefirst savefp(f`n2')
 15.                                 eststo: ivreg2 `y' `base' (fert=twin_`n'_fam) `wt' `ce',      /*
>                                 */ `se' savefirst savefp(f`n1')
 16. 
.                                 local estimates `estimates' est`n3' est`n2' est`n1' 
 17.                                 local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
 18.                                 local n1=`n1'+3
 19.                                 local n2=`n2'+3
 20.                                 local n3=`n3'+3
 21.                         }
 22.                 }
 23.                 estout `estimates' using "$Tables/IV/`IV'_time_`time'.xls", replace ///
>                   keep(fert malec $age $S $H) `estopt' `varlab'
 24. 
.                 estout `firststage' using "$Tables/IV/`IV1'_time_`time'.xls", replace ///
>                   keep(twin_* malec $age $S $H) `estopt' `varlab' 
 25.         
.                 estimates clear
 26.         }
. }

. 
. 
. ********************************************************************************
. **** (6) IV including twins and pre-twins
. ********************************************************************************
. if `IVtwin'==1 {
.         local n1=1
.         local n2=2
.         local n3=3
.         local estimates
.         local firststage
. 
.         foreach n in `gplus' {
  2.                 local c  `cond'&`n'_plus_twins==1
  3.                 local ce `cond'&`n'_plus_twins==1&e(sample)
  4.                 foreach y of varlist $outcomes {
  5.                         eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' `c', /*
>                         */ `se' savefirst savefp(f`n3')
  6.                         eststo: ivreg2 `y' `base' $age $S (fert=twin_`n'_fam) `wt' `ce',   /*
>                         */ `se' savefirst savefp(f`n2')
  7.                         eststo: ivreg2 `y' `base' (fert=twin_`n'_fam) `wt' `ce',           /*
>                         */ `se' savefirst savefp(f`n1')
  8. 
.                         local estimates `estimates' est`n3' est`n2' est`n1' 
  9.                         local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
 10.                         local n1=`n1'+3
 11.                         local n2=`n2'+3
 12.                         local n3=`n3'+3
 13.                 }
 14.         }
. 
.         estout `estimates' using "$Tables/IV/`IVt'_`births'.xls", replace ///
>         keep(fert malec $age $S $H) `estopt' `varlab'
. 
.         estout `firststage' using "$Tables/IV/`IVt1'_`births'.xls", replace ///
>         keep(twin_* malec $age $S $H) `estopt' `varlab' 
.         
.         estimates clear
. }

. 
. ********************************************************************************
. **** (7a) IV by income (country)
. ********************************************************************************
. if `income'==1 {
.         cap drop income
.         gen income="low" if inc_status=="L"
.         replace income="mid" if inc_status!="L"
.         tab income
.         
.         foreach inc in low mid {
  2.                 local n1=1
  3.                 local n2=2
  4.                 local n3=3
  5.                 local estimates
  6.                 local firststage
  7. 
.                 foreach n in `gplus' {
  8.                         local c  `cond'&`n'_plus==1&income=="`inc'"
  9.                         local ce `cond'&`n'_plus==1&income=="`inc'"&e(sample)
 10.                         foreach y of varlist $outcomes {
 11.                                 eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' `c',/*
>                                 */ `se' savefirst savefp(f`n3')
 12.                                 eststo: ivreg2 `y' `base' $age $S (fert=twin_`n'_fam) `wt' `ce', /*
>                                 */ `se' savefirst savefp(f`n2')
 13.                                 eststo: ivreg2 `y' `base' (fert=twin_`n'_fam) `wt' `ce', /*
>                                 */ `se' savefirst savefp(f`n1')
 14. 
. 
.                                 local estimates `estimates' est`n3' est`n2' est`n1' 
 15.                                 local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
 16.                                 local n1=`n1'+3
 17.                                 local n2=`n2'+3
 18.                                 local n3=`n3'+3
 19.                         }
 20.                 }
 21. 
.         estout `estimates' using "$Tables/IV/`IVinc'_`inc'_`births'.xls", replace ///
>         keep(fert malec $age $S $H) `estopt' `varlab'
 22. 
.         estout `firststage' using "$Tables/IV/`IVinc1'_`inc'_`births'.xls", replace ///
>         keep(twin_* malec $age $S $H) `estopt' `varlab'
 23.         
.         estimates clear
 24.         }
. }

. 
. ********************************************************************************
. **** (7b) IV by wealth (household)
. ********************************************************************************
. if `wealth'==1 {
.         cap mkdir "$Tables/IV/Wealth/"
.         foreach num of numlist 1(1)5 {
  2.                 local n1=1
  3.                 local n2=2
  4.                 local n3=3
  5.                 local estimates
  6.                 local firststage
  7. 
.                 foreach n in `gplus' {
  8.                         local c  `cond'&`n'_plus==1&wealth==`num'
  9.                         local ce `cond'&`n'_plus==1&wealth==`num'&e(sample)
 10.                         foreach y of varlist $outcomes {
 11.                                 eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' `c',/*
>                                 */ `se' savefirst savefp(f`n3')
 12.                                 eststo: ivreg2 `y' `base' $age $S (fert=twin_`n'_fam) `wt' `ce', /*
>                                 */ `se' savefirst savefp(f`n2')
 13.                                 eststo: ivreg2 `y' `base' (fert=twin_`n'_fam) `wt' `ce', /*
>                                 */ `se' savefirst savefp(f`n1')
 14. 
. 
.                                 local estimates `estimates' est`n3' est`n2' est`n1' 
 15.                                 local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
 16.                                 local n1=`n1'+3
 17.                                 local n2=`n2'+3
 18.                                 local n3=`n3'+3
 19.                         }
 20.                 }
 21. 
.         estout `estimates' using "$Tables/IV/Wealth/`IVweal'_`num'_`births'.xls", replace ///
>         keep(fert malec $age $S $H) `estopt' `varlab'
 22. 
.         estout `firststage' using "$Tables/IV/Wealth/`IVweal1'_`num'_`births'.xls", replace ///
>         keep(twin_* malec $age $S $H) `estopt' `varlab'
 23.         
.         estimates clear
 24.         }
. }

. 
. ********************************************************************************
. **** (7c) IV by gender
. ********************************************************************************
. if `gender'==1 {
.         foreach gend in F M {
  2.                 local n1=1
  3.                 local n2=2
  4.                 local n3=3
  5.                 local estimates
  6.                 local firststage
  7. 
.                 foreach n in `gplus' {
  8.                         local c  `cond'&`n'_plus==1&gender==`"`gend'"'
  9.                         local ce `cond'&`n'_plus==1&gender==`"`gend'"'&e(sample)
 10.                         foreach y of varlist $outcomes {
 11.                                 eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' `c',/*
>                                 */ `se' savefirst savefp(f`n3')
 12.                                 eststo: ivreg2 `y' `base' $age $S (fert=twin_`n'_fam) `wt' `ce', /*
>                                 */ `se' savefirst savefp(f`n2')
 13.                                 eststo: ivreg2 `y' `base' (fert=twin_`n'_fam) `wt' `ce', /*
>                                 */ `se' savefirst savefp(f`n1')
 14. 
. 
.                                 local estimates `estimates' est`n3' est`n2' est`n1' 
 15.                                 local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
 16.                                 local n1=`n1'+3
 17.                                 local n2=`n2'+3
 18.                                 local n3=`n3'+3
 19.                         }
 20.                 }
 21. 
.                 estout `estimates' using "$Tables/IV/`IVgend'_`gend'_`births'.xls", replace ///
>                   keep(fert $age $S $H) `estopt' `varlab'
 22. 
.                 estout `firststage' using "$Tables/IV/`IVgend1'_`gend'_`births'.xls", replace ///
>                   keep(twin_* $age $S $H) `estopt' `varlab'
 23.         
.                 estimates clear
 24.         }
. }

. 
. 
. if `genderint'==1 {
.         local endog fert fertXthreshold
.         /*
>         cap gen female=1 if gender=="F"
>         replace female=0 if gender=="M"
>         cap gen Ffert = fert*female
> 
>         foreach ii of numlist 1(1)5 {
>                 local n`ii'=`ii'
>         }
>         local t=2
>         local estimates
>         local firststage
> 
>         foreach n in `gplus' {
>                 foreach gend in F M {
>                         preserve
>                         cap gen Ftwin_`n'_fam=twin_`n'_fam*female
>                         keep `cond'&`n'_plus==1&gender=="`gend'"
> 
>                         gen threshold=(twin_`n'_fam==1 & idealnumkids==`t')
>                         gen fertXthreshold=fert*threshold
>                         gen desired=idealnumkids<=`t'                   
>                         cap gen twin`n'Xthreshold = twin_`n'_fam*threshold
>                         local insts twin_`n'_fam twin`n'Xthreshold
>                         
>                         
>                         foreach y of varlist $outcomes {
> *                               eststo: ivregress 2sls `y' i.female#c.(`base' $age $S $H) female /*
> *                               */ (fert Ffert=twin_`n'_fam Ftwin_`n'_fam) `wt', `se'
> 
>                                 eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt', /*
>                                 */ `se' savefirst savefp(f`n5')
> 
>                                 eststo: ivreg2 `y' `base' $age $S $H _bord* (fert=twin_`n'_fam) `wt', /*
>                                 */ `se' savefirst savefp(f`n4')
> 
>                                 eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' /*
>                                 */ if inc_status=="L", `se' savefirst savefp(f`n3')
> 
>                                 eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' /*
>                                 */ if inc_status!="L", `se' savefirst savefp(f`n2')
> 
>                                 eststo: ivreg2 `y' `base' $age $S $H desired (`endog' = `insts') /*
>                                 */ `wt', `se' savefirst savefp(f`n1')
> 
>                                 local estimates `estimates' est`n5' est`n4' est`n3' est`n2' est`n1'
>                                 local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert fert /*
>                                 */ f`n4'fert fert f`n5'fert
> 
>                                 foreach ii of numlist 1(1)5 {
>                                         local n`ii'=`n`ii''+5
>                                 }
>                         }
>                         restore
>                 }
>                 local ++t
>         }
>         estout `estimates' using "$Tables/IV/`IVgendi'_`births'.xls", replace ///
>         keep(fert $age $S $H) `estopt' `varlab'
> 
>         estout `firststage' using "$Tables/IV/`IVgendi1'_`births'.xls", replace ///
>         keep(twin_* $age $S $H) `estopt' `varlab'
>         
>         estimates clear
>         */
.         
.         local n1=1
.         foreach n in `gplus' {
  2.                 foreach gend in F M {
  3.                         preserve
  4.                         keep `cond'&`n'_plus_twins==1&gender=="`gend'"                  
  5. 
.                         foreach y of varlist $outcomes {
  6.                                 eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt', /*
>                                 */ `se' savefirst savefp(f`n1')
  7.                                 local ++n1
  8.                                 
.                                 eststo: ivreg2 `y' `base' $age $S $H _bord* (fert=twin_`n'_fam) `wt', /*
>                                 */ `se' savefirst savefp(f`n1')
  9.                                 local ++n1
 10.                         }
 11.                         restore
 12.                 }
 13.         }
.         estout est1 est2 est3 est4 est5 est6 est7 est8 est9 est10 est11 est12 est13 ///
>         est14 est5 est16 using "$Tables/IV/`IVgendi'_twin_`births'.xls", replace ///
>           keep(fert $age $S $H) `estopt' `varlab'
. 
.         estout f1fert f2fert f3fert f4fert f5fert f6fert f7fert f8fert f9fert f10fert ///
>         f11fert f12fert f13fert f14fert f15fert f16fert using ///
>           "$Tables/IV/`IVgendi1'_twin_`births'.xls", replace ///
>           keep(twin_* $age $S $H) `estopt' `varlab'
. 
. }

. ********************************************************************************
. **** (8) IV with twin threshold
. ********************************************************************************
. if `desire'==1 {
.         *gen idealbarrier=floor(idealnumkids)
.         gen idealbarrier=floor(desiredfert_region)
. 
.         local endog fert fertXthreshold
. 
.         cap drop income
.         gen income="low" if inc_status=="L"
.         replace income="mid" if inc_status!="L"
. 
.         
.         foreach inc in all low mid {
  2.                 if "`inc'"=="all" local cex
  3.                 else if "`inc'"=="low"|"`inc'"=="mid" local cex &income=="`inc'"
  4. 
.                 local n1=1
  5.                 local n2=2
  6.                 local n3=3
  7.                 local estimates
  8.                 local firststage
  9. 
.                 local t=2
 10.                 foreach n in `gplus' {
 11.                         local c  `cond'&`n'_plus==1 `cex'
 12.                         local ce `cond'&`n'_plus==1&e(sample) `cex'
 13. 
.                         preserve
 14.                         keep `c'
 15.                         gen threshold=(twin_`n'_fam==1 & idealbarrier==`t')
 16.                         gen fertXthreshold=fert*threshold
 17.                         gen desired=idealbarrier<=`t'
 18.                         
.                         cap gen twin`n'Xthreshold = twin_`n'_fam*threshold
 19.                         local insts twin_`n'_fam twin`n'Xthreshold
 20. 
.                         foreach y of varlist $outcomes {
 21.                                 eststo: ivreg2 `y' `base' $age $S $H desired (`endog' = `insts') /*
>                                 */ `wt' `c', `se' savefirst savefp(f`n3')
 22.                                 eststo: ivreg2 `y' `base' $age $S desired (`endog' = `insts') /*
>                                 */ `wt' `ce', `se' savefirst savefp(f`n2')
 23.                                 eststo: ivreg2 `y' `base' desired (`endog' = `insts') /*
>                                 */ `wt' `ce', `se' savefirst savefp(f`n1')
 24. 
.                                 local estimates `estimates' est`n3' est`n2' est`n1'
 25.                                 local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
 26.                 
.                                 local n1=`n1'+3
 27.                                 local n2=`n2'+3
 28.                                 local n3=`n3'+3
 29.                         }
 30.                         local ++t
 31.                         drop threshold fertXthreshold desired
 32.                         restore
 33.                 }
 34. 
.                 estout `estimates' using "$Tables/IV/`IVdes'_`inc'_`births'.xls", replace ///
>                  keep(fert fertXthreshold malec $age $S $H) `estopt' `varlab'
 35. 
.                 estout `firststage' using "$Tables/IV/`IVdes1'_`inc'_`births'.xls", replace ///
>                  keep(twin* malec $age $S $H) `estopt' `varlab'
 36.         
.                 estimates clear
 37.         }
. }

. 
. 
. if `desire_sep'==1 {
.         cap mkdir "$Tables/IV/Desire/"
.         foreach num of numlist 0 1 {
  2.                 if `num'==0 local fT "NoThreshold"
  3.                 else if `num'==1 local fT "Threshold"
  4. 
.                 local n1=1
  5.                 local n2=2
  6.                 local n3=3
  7.                 local estimates
  8.                 local firststage
  9. 
.                 local t=2
 10.                 foreach n in `gplus' {
 11.                         gen threshold=(twin_`n'_fam==1 & idealnumkids==`t')
 12.                         if `num'==0 cap gen twin`n'Xthreshold = twin_`n'_fam*(1-threshold)
 13.                         else if `num'==1 cap gen twin`n'Xthreshold = twin_`n'_fam*threshold
 14.                         
.                         local c  `cond'&`n'_plus==1
 15.                         local ce `cond'&`n'_plus==1&e(sample)
 16.                         
.                         foreach y of varlist $outcomes {
 17.                                 eststo: ivreg2 `y' `base' $age $S $H (fert=twin`n'Xthreshold) /*
>                                 */ `wt' `c', `se' savefirst savefp(f`n3')
 18.                                 eststo: ivreg2 `y' `base' $age $S (fert=twin`n'Xthreshold) /*
>                                 */ `wt' `ce', `se' savefirst savefp(f`n2')
 19.                                 eststo: ivreg2 `y' `base' (fert=twin`n'Xthreshold) /*
>                                 */ `wt' `ce', `se' savefirst savefp(f`n1')
 20. 
. 
.                                 local estimates `estimates' est`n3' est`n2' est`n1' 
 21.                                 local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
 22. 
.                                 local n1=`n1'+3
 23.                                 local n2=`n2'+3
 24.                                 local n3=`n3'+3
 25. 
.                                 drop threshold twin`n'Xthreshold
 26.                         }
 27.                         local ++t
 28.                 }
 29. 
.         estout `estimates' using "$Tables/IV/Desire/`IVdesS'_`fT'_`births'.xls", ///
>           replace keep(fert malec $age $S $H) `estopt' `varlab'
 30. 
.         estout `firststage' using "$Tables/IV/Desire/`IVdesS1'_`fT'_`births'.xls", ///
>           replace keep(twin* malec $age $S $H) `estopt' `varlab'
 31.         
.         estimates clear
 32.         }
. }

. ********************************************************************************
. **** (9) IV with twin threshold condition on same fertility preference
. ********************************************************************************
. if `pref'==1 {
.         local endog fert fertXthreshold
. 
.         foreach inc in all /*low mid*/ {
  2.                 if "`inc'"=="all" local cex
  3.                 else if "`inc'"=="low"|"`inc'"=="mid" local cex &income=="`inc'"
  4. 
.                 local n1=1
  5.                 local n2=2
  6.                 local n3=3
  7.                 local estimates
  8.                 local firststage
  9. 
.                 local t=2
 10.                 foreach n in `gplus' {
 11.                         local c  `cond'&`n'_plus==1 `cex'
 12.                         local ce `cond'&`n'_plus==1&e(sample) `cex'
 13. 
.                         local ik idealnumkids
 14.                         
.                         gen threshold=(twin_`n'_fam==1 & idealnumkids==`t')
 15.                         gen fertXthreshold=fert*threshold
 16.                         
.                         cap gen twin`n'Xthreshold = twin_`n'_fam*threshold
 17.                         local insts twin_`n'_fam twin`n'Xthreshold
 18. 
.                         foreach y of varlist $outcomes {
 19.                                 eststo: ivreg2 `y' `base' $age $S $H `ik' (`endog' = `insts') /*
>                                 */ `wt' `c', `se' savefirst savefp(f`n3')
 20.                                 eststo: ivreg2 `y' `base' $age $S `ik' (`endog' = `insts') /*
>                                 */ `wt' `ce', `se' savefirst savefp(f`n2')
 21.                                 eststo: ivreg2 `y' `base' `ik' (`endog' = `insts') /*
>                                 */ `wt' `ce', `se' savefirst savefp(f`n1')
 22. 
.                                 local estimates `estimates' est`n3' est`n2' est`n1'
 23.                                 local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
 24.                 
.                                 local ++t
 25.                                 local n1=`n1'+3
 26.                                 local n2=`n2'+3
 27.                                 local n3=`n3'+3
 28.                         }
 29.                         drop threshold fertXthreshold
 30.                 }
 31. 
.                 estout `estimates' using "$Tables/IV/`IVpref'_`inc'_`births'.xls", replace ///
>                  keep(fert fertXthreshold malec $age $S $H) `estopt' `varlab'
 32. 
.                 estout `firststage' using "$Tables/IV/`IVpref1'_`inc'_`births'.xls", replace ///
>                  keep(twin* malec $age $S $H) `estopt' `varlab'
 33.         
.                 estimates clear
 34.         }
. }

. 
. 
. 
. ********************************************************************************
. **** (10) New results 04/01/2013.  This first section is a quick look at whether
. ***  truncated and non truncated fertility look similar in terms of 1st stage.
. ***  Also, the IMR test (pre-twins) is included as `twinoccur'
. ********************************************************************************
. if `new'==1 {
.         local n1=1
.         local n2=2
.         local n3=3
.         local estimates
. 
.         foreach age of numlist 35 40 {
  2.                 foreach n in `gplus' {
  3.                         local c  `cond'&agemay>`age'&`n'_plus==1
  4.                         local ce `cond'&agemay>`age'&`n'_plus==1&e(sample)
  5.                         foreach y of varlist $outcomes {
  6.                                 eststo: reg fert `base' $age $S $H twin_`n'_fam `wt' `c'&`y'!=., `se'
  7.                                 eststo: reg fert `base' $age $S twin_`n'_fam `wt' `ce', `se'
  8.                                 eststo: reg fert `base' twin_`n'_fam `wt' `ce', `se'
  9. 
.                                 local estimates `estimates' est`n3' est`n2' est`n1' 
 10.                                 local n1=`n1'+3
 11.                                 local n2=`n2'+3
 12.                                 local n3=`n3'+3
 13.                         }
 14.                 }
 15.         }
.                 
.         estout `estimates' using "$Tables/New/NewFirst.xls", replace ///
>         keep(twin* malec $age $S $H _contracep*) `estopt'
. 
.         
.         estimates clear
. }

. 
. if `twinoccur_ols'==1 {
.         gen ta=age if twind==1
.         bys id: egen twinage=min(ta)
.         gen twinagedif=twinage-age
.         
.         gen treated=twinfamily>=1&twinagedif>1&twinagedif!=.
.         replace treated=. if twinfamily>=1&twinagedif<1
.         tab treated
. 
.         local n1=1
.         local n2=2
.         local n3=3
.         local estimates
. 
.         replace infantmortality=infantmortality*100
.         foreach n in `gplus' {
  2.                 local c  `cond'&`n'_plus==1
  3.                 local ce `cond'&`n'_plus==1&e(sample)
  4.                 eststo: reg infantmortality `base' $age $S $H treated `wt' `c', `se'
  5.                 eststo: reg infantmortality `base' $age $S treated `wt' `ce', `se'
  6.                 eststo: reg infantmortality `base' $age treated `wt' `ce', `se'
  7. 
.                 local estimates `estimates' est`n3' est`n2' est`n1' 
  8.                 local n1=`n1'+3
  9.                 local n2=`n2'+3
 10.                 local n3=`n3'+3
 11.         }
.         
.                 
.         estout `estimates' using "$Tables/New/PreTwinTest_`births'.xls", replace ///
>         keep(treated malec $age $S $H) `estopt' 
.         estimates clear
. 
.         
. }

. if `twinoccur_iv'==1 {
.         local n1=1
.         local n2=2
.         local n3=3
.         local estimates
.         local firststage
. 
.         foreach n in `gplus' {
  2.                 local c  `cond'&`n'_plus==1
  3.                 local ce `cond'&`n'_plus==1&e(sample)
  4.                 foreach y of varlist infantmortality {
  5.                         eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' `c', /*
>                         */ `se' savefirst savefp(f`n3')
  6.                         eststo: ivreg2 `y' `base' $age $S (fert=twin_`n'_fam) `wt' `ce',   /*
>                         */ `se' savefirst savefp(f`n2')
  7.                         eststo: ivreg2 `y' `base' (fert=twin_`n'_fam) `wt' `ce',           /*
>                         */ `se' savefirst savefp(f`n1')
  8. 
.                         local estimates `estimates' est`n3' est`n2' est`n1' 
  9.                         local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
 10.                         local n1=`n1'+3
 11.                         local n2=`n2'+3
 12.                         local n3=`n3'+3
 13.                 }
 14.         }
. 
.         estout `estimates' using "$Tables/New/IMRtest_`births'.xls", replace ///
>         keep(fert malec $age $S $H) `estopt' `varlab'
. 
.         estout `firststage' using "$Tables/New/IMRtest_f_`births'.xls", replace ///
>         keep(twin_* malec $age $S $H) `estopt' `varlab' 
.         
.         estimates clear
. 
. 
. }

. 
. 
. ********************************************************************************
. **** (11) Conley et al approach
. ***  Here we are assuming that:
. ***     quality  = beta*quantity + gamma*twin + epsilon.
. ***     quantity = pi*twin + nu
. ***
. ***  Typical instrumental assumption is that gamma=0, but Conley et al relax
. ***  this so that gamma can be a small effect, or as they say, we have "prior
. ***  information that implies that gamma is near 0 but perhaps not exactly 0".
. ********************************************************************************
. if `conley'==1 {
. *       do $ConAdos/uci.ado
. *       do $ConAdos/ltz.ado
.         do "$ConAdos/plausexog.ado"
. 
.         *****************************************************************************
.         *** (11a) Union of Confidence Intervals (have now removed $S and $H)
.         *****************************************************************************   
.         matrix conbounds = J(5,4,1)
.         local ii=3
.         foreach n in `gplus' {
  2.                 *local c `cond'&`n'_plus==1&income=="`inc'"
.                 local c `cond'&`n'_plus==1
  3. 
.                 reg school_zscore fert twin_`n'_fam `base' $age `c'
  4.                 local estimate `=_b[twin_`n'_fam]'
  5.                                 
.                 foreach num of numlist 1 /*2*/ {
  6.                         dis "estimating for `num' times the estimated coefficient on twins"
  7.                         local est2=`estimate'*`num'
  8.                         plausexog uci school_zscore `base' $age (fert = twin_`n'_fam) `c', /*
>                         */ gmin(0) gmax(`est2') grid(2) level(.95) robust
  9.                 }
 10.                 mat conbounds[`ii',1]=e(lb_fert)
 11.                 mat conbounds[`ii',2]=e(ub_fert)                
 12.                 **************************************************************************
.                 *** (11b) Local to Zero Approach
.                 **************************************************************************
.                 local items = `e(numvars)'
 13.                 matrix omega_eta = J(`items',`items',0)
 14.                 matrix omega_eta[1,1] = (`estimate'/sqrt(12))^2
 15.                 matrix mu_eta = J(`items',1,0)
 16.                 matrix mu_eta[1,1] = `estimate'/2
 17. 
.                 foreach num of numlist 1(1)5 {
 18.                         matrix om`num'=omega_eta
 19.                         matrix om`num'[1,1] = ((`num'/5)*`estimate'/sqrt(12))^2
 20.                         matrix mu`num'=mu_eta
 21.                         matrix mu`num'[1,1]= (`num'/5)*`estimate'/2
 22.                 }
 23. 
.                 foreach num of numlist 1(1)5{
 24.                         local nd`num'=(`num'/5)*`estimate'
 25.                 }
 26.                 
.                 plausexog ltz school_zscore `base' $age (fert = twin_`n'_fam) `c', /*
>                 */ omega(omega_eta) mu(mu_eta) level(0.95) robust graph(fert) /*
>                 */ graphomega(om1 om2 om3 om4 om5) graphmu(mu1 mu2 mu3 mu4 mu5) /*
>                 */ graphdelta(`nd1' `nd2' `nd3' `nd4' `nd5')
 27.                 graph export "$Graphs/Conley/LTZ_`n'.eps", as(eps) replace
 28. 
.                 mat conbounds[`ii',3]=_b[fert]-1.96*_se[fert]
 29.                 mat conbounds[`ii',4]=_b[fert]+1.96*_se[fert]
 30. 
.                 mat conbounds[5,`ii']=`estimate'
 31.                 local ++ii
 32.                 
.                 mat colnames conbounds = LowerBound UpperBound LowerBound UpperBound
 33.                 mat rownames conbounds = TwoPlus ThreePlus FourPlus FivePlus deltas
 34.         }
.         *****************************************************************************
.         *** (11c) Write Conley et al results to file
.         *****************************************************************************
.         mat2txt, matrix(conbounds) saving("$Tables/Conley/ConleyResults.txt") /*
>                 */ format(%6.4f) replace
. 
. }

. 
. ********************************************************************************
. *** (12) Is twins crossing desired threshold related to family characteristics?
. *** First version compares twins crossing threshold to all families, second only
. *** to other twin families (more reasonable).
. ********************************************************************************
. if `thresholdtest'==1 {
.         gen threshold2=(twin_two_fam==1   & idealnumkids==2)
.         gen threshold3=(twin_three_fam==1 & idealnumkids==3)
.         gen threshold4=(twin_four_fam==1  & idealnumkids==4)
.         gen threshold5=(twin_five_fam==1  & idealnumkids==5)    
. 
.         gen threshold=threshold2+threshold3+threshold4+threshold5
. 
.         replace threshold=threshold*100
.         sum threshold*
. 
. /*      reg threshold $twinpredict `wt', `se'
>         outreg2 $twinout using $Tables/crossing.xls, excel replace
>         test educf educfyrs_sq height bmi
>         local Ftestall=r(p)
>         
>         local t=2
>         foreach num in `gplus' {
>                 reg threshold`t' $twinpredict `wt' if `num'_plus==1, `se'
>                 outreg2 $twinout using $Tables/crossing.xls, excel append
>                 test educf educfyrs_sq height bmi
>                 local Ftest`num'=r(p)
>                 
>                 local ++t
>         }
> */
.         preserve
.         keep if twinfamily>0&twinfamily!=.
.         *collapse threshold motherage motheragesq agefirstbirth educf educfyrs_sq /*
>         **/ height bmi child_yob _cou sweight, by(id)
.         *replace child_yob=round(child_yob)
.         reg threshold $twinpredict `wt', `se'
.         outreg2 $twinout using $Tables/crossing_twins.xls, excel replace
.         test educf educfyrs_sq height bmi
.         local Ftwinall=r(p)
.         restore
. /*
>         local t=2
>         foreach num in `gplus' {
>                 reg threshold`t' $twinpredict `wt' if twinfamily>0&twinfamily!=.&`num'_plus==1, `se'
>                 outreg2 $twinout using $Tables/crossing_twins.xls, excel append
>                 test educf educfyrs_sq height bmi
>                 local Ftwin`num'=r(p)
>                 
>                 local ++t
>         }       
>         
>         dis "`Ftestall' `Ftesttwo' `Ftestthree' `Ftestfour' `Ftestfive'"
>         dis "`Ftwinall' `Ftwintwo' `Ftwinthree' `Ftwinfour' `Ftwinfive'"
> 
>         
> 
>         gen fertshortfall=fert-idealnumkids
>         reg idealnumkids $twinpredict `wt', `se'
>         outreg2 $twinout using $Tables/desiredtest.tex, tex(pretty) replace
>         reg fertshortfall $twinpredict `wt', `se'
>         outreg2 $twinout using $Tables/desiredtest.tex, tex(pretty) append
> */      
.         /*
>         gen lowinc=income=="low"
>         cap log close
>         log using "$Base/Results/Sum/Desired/DesiredSum.txt", text replace
>         foreach num of numlist -1 0 1 {
>                 sum fert idealnumkids agemay educf height bmi educ school_zscore /*
>                 */ noeduc highschool infantmortality childmortality agefirstbirth /*
>                 */ motherage lowinc if idealfam==`num'
>         }
>         cap log close
>         */
. }

. 
. ********************************************************************************
. **** (13) Twin treated versus untreated balance
. ********************************************************************************
. if `balance'==1 {
.         estimates clear
.         do "$Source/myttests.ado"
. 
. 
.         foreach opt in /*child*/ mother {
  2.                 gen Treated=1 if twinfamily>0&twinfamily!=.
  3.                 replace Treated=0 if twinfamily==0
  4.                 tab wealth, gen(_wealth)
  5. 
. 
.                 if `"`opt'"'=="mother" {
  6.                         collapse $balance _wealth* Treated, by(id)
  7.                 }
  8. 
.                 lab var fert "Total Fertilty"
  9.                 lab var idealnumkids "Desired Fertility"
 10.                 lab var agefirstbirth "Age First Birth"
 11.                 lab var educf "Mother's Education"
 12.                 lab var educp "Father's Education"
 13.                 lab var height "Mother's Height"
 14.                 lab var underweight "Pr(BMI $<$ 18.5)"
 15.                 *lab var antenatal "Number of Antenatal Checks"
.                 lab var prenate_doc "Prenatal care (doctor)"
 16.                 lab var prenate_nurse "Prenatal care (nurse)"           
 17.                 lab var prenate_none "Prenatal care (none)"
 18.                 lab var motherage "Mother's Age"
 19.                 lab var _wealth1 "Wealth Quintile 1"
 20.                 lab var _wealth2 "Wealth Quintile 2"
 21.                 lab var _wealth3 "Wealth Quintile 3"
 22.                 lab var _wealth4 "Wealth Quintile 4"
 23.                 lab var _wealth5 "Wealth Quintile 5"
 24.                 lab var childmortality "Child Mortality"
 25.                 lab var infantmortality "Infant Mortality"              
 26. 
.                 
.                 myttests $balance _wealth*, by(Treated)
 27.                 ereturn list
 28.                 *esttab using $Tables/Balance.xls, nomtitle nonumbers noobs ///
>                 *  cells("mu_1(fmt(a3)) mu_2 d(star pvalue(d_p))" " . . d_se(par)") replace
. 
.                 esttab using $Tables/Balance_`opt'.tex, nomtitle nonumbers noobs ///
>                   booktabs title(Test of Balance of Observables: Twins versus Non-twins ///
>                   \label{TWINtab:comp}) label ///
>                   cells("mu_1(fmt(a3)) mu_2 d(star pvalue(d_p))" " . . d_se(par)") replace
 29. 
.         }
. }

. 
. 
. ********************************************************************************
. **** (14) Intensity results (look only at children affected by twins for most of
. ***  their life)
. ********************************************************************************
. if `intense'==1 {
. 
.         local index=2
.         foreach n in `gplus' {
  2.                 gen ind=child_yob if bord==`index'
  3.                 bys id: egen `n'_yob=min(ind)
  4.                 drop ind
  5.                 gen yrsTo`n'=child_yob-`n'_yob if `n'_plus==1
  6. 
.                 local estimates
  7.                 local firststage
  8.                 foreach NN of numlist 3(3)12 {
  9.                         local cycle=`NN'/3
 10.                         local c  `cond'&`n'_plus==1&yrsTo`n'<=0&yrsTo`n'>=-`NN'
 11. 
.                         foreach y of varlist $outcomes {
 12.                                 eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' `c', /*
>                                 */ `se' savefirst savefp(f`NN'`y')
 13. 
.                                 local estimates `estimates' est`cycle'
 14.                                 local firststage `firststage' f`NN'`y'fert
 15.                         }
 16.                 }
 17. 
.                 estout `estimates' using "$Tables/IV/`IVint'_`births'_`n'.xls", ///
>                  replace keep(fert malec $age $S $H) `estopt' `varlab'
 18. 
.                 estout `firststage' using "$Tables/IV/`IVint1'_`births'_`n'.xls", ///
>                  replace keep(twin_* malec $age $S $H) `estopt' `varlab' 
 19.         
.                 estimates clear
 20.                 local ++index
 21.         }       
. }

. 
end of do-file

. exit, clear
