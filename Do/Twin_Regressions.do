/* Regressions 3.27              damiancclarke             yyyy-mm-dd:2013-04-15
*---|---------|---------|------  soniabhalotra  ------|---------|---------|----*
*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|----8

This file contains all summary statistics, figures, regressions and bounds tests
presented in the Twin Instrument paper.  Full details regarding creating this p-
aper from source including downloading and merging DHS, creating crude data and
formatting tables can be found in the README file located in this directory.

This do file uses as input the data file DHS_Twins, which is generated by the f-
ile Twin_Setup.do. Currently it includes all DHS files available up until Octob-
er 2013. To replicate results exactly no DHS files released after 2013 should be
included.

This file requires a number of user written ados which can be installed from the
SSC. These are ivreg2, outreg2, estout, ranktest, mat2txt and plausexog. This is
automated in lines 46-49.  The file can be completely controlled in Section (0).
Here directory locations are defined as global' variables, and, if desired, swi-
tches can be set to determine which sections of the file to run. Note that runn-
ing the entire file can take some time. On a machine with 16GB of virtual memory
the run-time is ~ 30 hours.  The time to run individual sections is considerably
shorter.

For optimal viewing set tab width equal to 2 in text editor.

Questions should be directed to damian.clarke@economics.ox.ac.uk.



Last edit:
* Jul 22nd, 2014: Adding MMR test
* Jul 15th, 2014: Overidentification test
* Jul 14th, 2014: Alternative health var (height only)
* May 29th, 2014: instrumenting for desired fertility
* May 10th, 2014: testing for 35+ as well.
* December 17th, 2013: considerable rewrite based on comments in 22 Nov email.
  Can revert by going back to git commit Nov 11 2013.
* September 12th, 2013: Address Paul Dev's comment about treatment
* August 5th, 2013: Update figures and tables based on Sonia's comments on
early draft.
*/


clear all
version 11.2
set more off
cap log close
set matsize 2000

foreach ado in ivreg2 outreg2 estout ranktest mat2txt plausexog arrowplot /*
*/ psacalc leebounds ttab {
	cap which `ado'
 	if _rc!=0 ssc install `ado'
}

*******************************************************************************
*** (0) Globals and Locals
*******************************************************************************
* DIRECTORIES
global Data    "~/investigacion/Activa/Twins/Data"
global Source  "~/investigacion/Activa/Twins/Do"
global Log     "~/investigacion/Activa/Twins/Log"
global Graphs  "~/investigacion/Activa/Twins/Results/Graphs"
global Tables  "~/investigacion/Activa/Twins/Results/Outreg"
global TAB     "~/investigacion/Activa/Twins/Results/Outreg"

foreach dirname in Summary Twin OLS RF IV Conley OverID MMR {
	cap mkdir "$TAB/`dirname'"
}


*SWITCHES (1 if run, else not run)
local samp5         0
local resave        0
local samples       0
local matchrate     0
local sumstats      0
  local graphs      0
local sumstats2     0
  local graphs2     0
local trends        0
local graphsMB      0
local graphsSW      0
local twin          0
local RF            0
local IVnl          0
local IVfee         0
local compl_fert    0
local twinoccur_ols 0
local twinoccur_iv  0
local thresholdtest 0
local balance       0
local country       0
local adj_fert      0
  local ADJIV       0
  local ADJtwin     0
  local ADJdesire   0
local overID        0
local MMR           0
local select        0
local pool          0


* VARIABLES
global outcomes school_zscore
global sumstatsM fert idealnumkids agemay educf height bmi underweight exceedfam
global sumstatsC educ school_zscore noeduc
global sumstatsF infantmortality childmortality
global twinpred motherage motheragesq agefirstbirth educf educfyrs_sq
global twinpredict $twinpred height bmi i.child_yob i._cou 
global twinout motherage motheragesq agefirstbirth educf educfyrs_sq height bmi
global base malec i._cou i.year_birth i.age i.contracep_intent 
global age motherage motheragesq motheragecub agefirstbirth 
global S _educf* _wealth*
global H height bmi preClustD preClustN preClustZ
global HP height bmi prenateCluster
global bal1 fert idealnumkids agefirstbirth educf educp height underweight
global balance $bal1 prenate* motherage childmortality infantmortal 

* ECONOMETRIC SPECIFICATIONS
local se   cluster(id)
local wt   [pw=sweight]
local cond if age<19

* FILE SPECIFICATIONS
local gplus two three four
local MAGE 0


* FILE NAMES
local Sum      Summary
local SumC     SummaryChild
local SumF     SummaryMortality
local SumBord  Summary_Birthorder
local TwinPred Twin_Predict
local IVt      Base_IV_twins
local IVt1     Base_IV_twins_firststage
local IVdes    Desire
local IVdes1   Desire_firststage


* FIGURES
local famsize   famsize
local famsize_e famsize_exceed
local twinbord  twinbybord
local idealfam  idealfamsize


* REPEATED OPTIONS
#delimit ;
local estopt cells(b(star fmt(%-9.3f)) se(fmt(%-9.3f) par))
   stats (r2 N, fmt(%9.2f %9.0g)) starlevel ("*" 0.10 "**" 0.05 "***" 0.01);
local varlab varlabels(agemay "Mother's age" magesq "Mother's Age Squared"
      agefirstbirth "Age First Birth" educf "Mother's Education" educfyrs_sq
      "Mother's Education Squared" height "Height" bmi "BMI");
local varlab varlabels(agemay "Mother's age" magesq "Mother's Age Squared"
      agefirstbirth "Age First Birth" educf "Mother's Education" educfyrs_sq
      "Mother's Education Squared" height "Height");

local conditions
  ALL==1
  gender=="F"
  gender=="M"
  income=="low"
  income=="mid"
  child_yob<=1984
  child_yob>1984
;
local conditions
  ALL==1
;
local conditions
  gender=="F"
  gender=="M"
  income=="low"
  income=="mid"
;
local fnames
  All
  Girls
  Boys
  LowIncome
  MidIncome
  BornPre1985
  BornPost1984
;
local fnames
  All
;
local fnames
  Girls
  Boys
  LowIncome
  MidIncome
;
#delimit cr

*******************************************************************************
*** (1) Setup (+ discretionary choices)
*******************************************************************************
log using "$Log/Twin_Regressions.txt", text replace

if `samp5'!=1 {
    use "$Data/DHS_twins", clear
    replace bmi=. if bmi>50
    replace height=. if height>240
    replace height=. if height<80
    replace educ=. if age<6
    replace educ=. if educ>25
    replace educf=. if educf>25
    replace birthspacing=. if birthspacing<8|birthspacing==999
    
    tab _cou, gen(_country)
    tab year_birth, gen(_yb)
    tab age, gen(_age)
    tab contracep_intent, gen(_contracep)
    tab bord, gen(_bord)
    local base malec _country* _yb* _age* _contracep* `add'
    drop if twinfamily>2
    
    gen cat="Low Inc, Singleton" if twind==0 & inc_status=="L"
    replace cat="Low Inc, Twin" if twind==1 & inc_status=="L"
    replace cat="Mid Inc, Single" if twind==0 & inc_status!="L"
    replace cat="Mid Inc, Twin" if twind==1 & inc_status!="L"
    encode cat, gen(catnum)
    egen category=concat(income twindfamily)
    egen nonmiss = rowmiss(educf height bmi motherage malec)
    bys _cou v001: egen preClustD = mean(prenate_doc)
    bys _cou v001: egen preClustN = mean(prenate_nurse)
    bys _cou v001: egen preClustZ = mean(prenate_none)
    replace wealth = 6 if wealth == .
    
    
    if `resave'==1 save "$Data/DHS_twins_mortality", replace
}

if `samp5'==1 {
*   set seed 2727
*   gen sampler=runiform()
*   keep if sampler>0.9
    use "$Data/DHS_twins10samp"
    bys _cou v001: egen preClustD = mean(prenate_doc)
    bys _cou v001: egen preClustN = mean(prenate_nurse)
    bys _cou v001: egen preClustZ = mean(prenate_none)
    replace wealth = 6 if wealth == .
}
tab wealth, gen(_wealth)
tab educf , gen(_educf)

*******************************************************************************
*** (1b) Check match rates
*******************************************************************************
if `matchrate'==1 {
	egen touse=rowmiss(fert idealnumkids agemay educf height bmi underweight)
	replace touse=. if touse!=0
	replace touse=1 if touse==0
	count if touse==1
	count if _merge==3&touse==1
	local totmatch=r(N)
	count if _merge==3&age<=18&touse==1
	local match18=r(N)
	dis "Percent of matched offspring under 18: `match18'/`totmatch'"
	count if _merge==2touse==1
	local totnonmatch=r(N)
	count if _merge==2&(age>18|childageatdeath!=.)&touse==1
	local nonmatch18=r(N)
	dis "Percent of non-matched offspring 18+/deceased: `nonmatch18'/`totnonmatch'"

	gen matched=1 if _merge==3&age<=18&touse==1
	replace matched=0 if _merge==2&age<=18&childageatdeath==.&touse==1

	foreach var of varlist age child_yob educf height bmi agemay twin malec {
		ttest `var', by(matched)
	}
}

if `samples'!=1 keep if _merge==3
*******************************************************************************
*** (1c) Sample sizes
*******************************************************************************
if `samples'==1 {

	bys id: gen NN=_n
	gen allsample   =1 `cond' & nonmiss==0
	gen hhsample    =1 `cond' & nonmiss==0 & _merge==3
	gen twopsample  =1 `cond' & nonmiss==0 & _merge==3 & two_plus==1   & age>=6
	gen threepsample=1 `cond' & nonmiss==0 & _merge==3 & three_plus==1 & age>=6
	gen fourpsample =1 `cond' & nonmiss==0 & _merge==3 & four_plus==1  & age>=6
	gen fivepsample =1 `cond' & nonmiss==0 & _merge==3 & five_plus==1  & age>=6

	file open sfile using "$Tables/Summary/Samples.txt", write replace
	file write sfile "Sample&N Children&N Mothers&Mean Age&Min Age&Max Age" _n

	
	foreach samp of varlist allsam hhsam twopsam threepsam fourpsam fivepsam {
		count if `samp'==1
		local kcount="`: display %9.0fc r(N)'"
		
		count if `samp'==1 & NN==1
		local mcount="`: display %9.0fc r(N)'"

		sum age if `samp'==1
		scalar am = "`: display %7.4f r(mean)'"
		scalar ami = "`: display %7.1f r(min)'"
		scalar ama = "`: display %7.1f r(max)'"
		
		file write sfile "`samp'&`kcount'&`mcount'"
		file write sfile "&`=scalar(am)'&`=scalar(ami)'&`=scalar(ama)'" _n		
	}

	file close sfile

	keep if _merge==3
	drop allsamp hhsamp twopsamp threepsamp fourpsamp fivepsamp NN
}

*******************************************************************************
*** (2) Summary Stats
*******************************************************************************
if `sumstats'==1 {
	
	if c(os)=="Unix" local format eps
	else if c(os)!="Unix" local format png
	
	***************************************************************************
	*** (2a) Tables
	***************************************************************************
	* (A) By twins
	local opts cells("count mean sd min max")
	local sep &		
	local numkids "Number of Children (Education)"
	local numkidsF "Number of Children (Ever Born)"
	local nummothers "Number of Mothers"
	local ncou "Number of Countries &"

	foreach num of numlist 1(1)4 {
		cap drop count 
		gen count = 1 `cond' & nonmiss==0
		replace count=. if catnum!=`num'
		foreach var of local sumstatsC {
			replace count=. if `var'==.
		}
		count if count==1 
		local kk = "`: display %9.0fc r(N)'"

		local numkids "`numkids' `sep'" "`kk'"

		bys id: gen n=_n
		count if count==1&n==1
		local mm = "`: display %9.0fc r(N)'"
		local nummothers "`nummothers' `sep'" "`mm'"
		drop n

	}

	levelsof _cou if income=="low"
	local lincc: word count `r(levels)'
	levelsof _cou if income=="mid"
	local mincc: word count `r(levels)'
	levelsof _cou
	local aincc: word count `r(levels)'	
	local numcountry "`ncou' `lincc'`sep'`lincc'`sep'`mincc'`sep'`mincc'`sep'`aincc'"

	count `cond' & nonmiss==0
	local kidcount = "`: display %9.0fc r(N)'"
	sum twind
	scalar at = "`: display %7.4f r(mean)'"
	scalar as = "`: display %7.4f r(sd)'"	
	sum twind if inc_status=="L"
	scalar lt = "`: display %7.4f r(mean)'"
	scalar ls = "`: display %7.4f r(sd)'"
	sum twind if inc_status!="L"
	scalar mt = "`: display %7.4f r(mean)'"
	scalar ms = "`: display %7.4f r(sd)'"

	sum bord if twind==1
	scalar abm = "`: display %7.3f r(mean)'"
	scalar abs = "`: display %7.3f r(sd)'"
	sum bord if twind==1 & inc_status=="L"
	scalar lbm = "`: display %7.3f r(mean)'"
	scalar lbs = "`: display %7.3f r(sd)'"
	sum bord if twind==1 &  inc_status!="L"
	scalar mbm = "`: display %7.3f r(mean)'"
	scalar mbs = "`: display %7.3f r(sd)'"


	preserve
	gen exceedfam=idealfam==1
	keep `cond'&nonmiss==0
	collapse $sumstatsM, by(id cat)
	count
	local mothercount = "`: display %9.0fc r(N)'"
	
	estpost tabstat $sumstatsM, by(cat) statistics(mean sd) listwise ///
	 columns(statistics)
	esttab using "$Tables/Summary/`Sum'.txt", replace main(mean) aux(sd) /*
	*/ nostar unstack noobs nonote nomtitle nonumber
	restore

	estpost tabstat $sumstatsC, by(cat) statistics(mean sd) listwise ///
	 columns(statistics)
	esttab using "$Tables/Summary/`SumC'.txt", replace main(mean) aux(sd) /*
	*/ nostar unstack noobs nonote nomtitle nonumber
	
	preserve
	use "$Data/DHS_twins_mortality.dta", clear
	keep `cond'
	estpost tabstat $sumstatsF, by(cate) statistics(mean sd) listwise ///
	 columns(statistics)
	esttab using "$Tables/Summary/`SumF'.txt", replace main(mean) aux(sd) /*
	*/ nostar unstack noobs nonote nomtitle nonumber

	foreach num of numlist 1(1)4 {
		cap drop count
		gen count = 1 `cond' & nonmiss==0

		replace count=. if catnum!=`num'
		foreach var of local sumstatsF {
			replace count=. if `var'==.
		}
		count if count==1
		local kk = "`: display %9.0fc r(N)'"

		local numkidsF "`numkidsF' `sep'" "`kk'"
	}
	count `cond' & nonmiss==0
	local kidcountF = "`: display %9.0fc r(N)'"
	
	clear
	restore


	file open resfile using "$Tables/Summary/Count.txt", write replace
	file write resfile "`numcountry' \\" _n
	file write resfile "`nummothers' & `mothercount' \\" _n
	file write resfile "`numkids' & `kidcount' \\" _n
	file write resfile "`numkidsF' & `kidcountF' \\" _n
	
	file write resfile "Fraction Twin & \multicolumn{2}{c}{ `=scalar(lt)'" ///
	  "}& \multicolumn{2}{c}{ `=scalar(mt)' } & `=scalar(at)'\\" _n
	file write resfile "& \multicolumn{2}{c}{(`=scalar(ls)')" ///
	  "}& \multicolumn{2}{c}{(`=scalar(ms)')} & (`=scalar(as)')\\" _n
	file write resfile "Birth Order Twin & \multicolumn{2}{c}{ `=scalar(lbm)'" ///
	  "}& \multicolumn{2}{c}{ `=scalar(mbm)' }& `=scalar(abm)'\\" _n
	file write resfile "& \multicolumn{2}{c}{(`=scalar(lbs)')" ///
	  "}& \multicolumn{2}{c}{(`=scalar(mbs)')}& (`=scalar(abs)')\\" _n
	file write resfile "`mothercount'"
	file close resfile

	/*
	preserve
	cap decode _cou, gen(WBcountry)
	gen colvar=inc_status=="L"
	collapse colvar, by(WBcountry _year)
	gen income="Low" if colvar==1
	replace income="Middle" if colvar==0
	drop colvar
	order WBcountry income _year
	sort WBc _year
	outsheet using "$Tables/Summary/Countries.csv", delimit(;) nonames replace
	restore
	*/
   ***************************************************************************
	*** (2b) Graphical
	*** graph 1: total births by family type (twins vs non-twins)
	*** graph 2: total births by family type for families who exceed desired
	*** graph 3: Proportion of twins by birth order
	*** graph 4: Desired family size
	*** graphs 5-7: Desired family size by mother's characteristics
	***************************************************************************
	if `graphs'==1 {

  #delimit ;
	twoway kdensity fert if twinfamily>0&twinfamily!=., lpattern(dash) bw(2) ||
	  kdensity fert if twinfamily==0, bw(2) scheme(s1color) ytitle("Density")   
	  legend(label(1 "Twin Family") label(2 "Singleton Family"))               
	  xtitle("total children ever born"); 
	graph save "$Graphs/`famsize'", replace;
	graph export "$Graphs/`famsize'.`format'", as(`format') replace;

	twoway kdensity fert if twinfamily>0&twinfamily!=. & fert > idealnumkids, 
	  bw(2) lpattern(dash) || kdensity fert if twinfamily==0 & 
	  fert > idealnumkids & twin_bord >= idealnumkids, bw(2) scheme(s1color) 
	  legend(label(1 "Twin Family") label(2 "Singleton Family")) 
	  ytitle("Density") title("Total births by Family Type") 
	  xtitle("total children ever born") 
	  subtitle("For families who exceed desired family size");
    #delimit cr
	graph save "$Graphs/`famsize_e'", replace
	graph export "$Graphs/`famsize_e'.`format'", as(`format') replace

	
	local note1 "Single births are 1-frac(twins). "
	local note2 "Total fraction of twins is represented by the solid line."
	local gnote "`note1' `note2'"
	sum twind
	local twinave=r(mean)	
	preserve
	collapse twind [pw=sweight], by(bord)
	gen twinave=`twinave'	
	line twind bord if bord<11, lpattern(dash)                     ///
	  ytitle("Fraction twins") xtitle("Birth Order") yline(0.0189) ///
	  scheme(s1color)
	graph save "$Graphs/`twinbord'", replace
	graph export "$Graphs/`twinbord'.`format'", as(`format') replace

	twoway bar twind bord if bord<11 ||                     ///
	line twinave bord if bord<11, ytitle("Fraction twins")  ///
	  scheme(s1color) xtitle("Birth Order")
	graph save "$Graphs/`twinbord'_hist", replace
	graph export "$Graphs/`twinbord'_hist.`format'", as(`format') replace
	restore

	
	local n1 "Total sample of families is 1,586,899.  2.61% of families report "
	local n2 "'up to god', and 4.39% provide"
	local n3 "a non-numeric response. These are omitted here."	
	preserve
	collapse idealnumkids [pw=sweight], by(id)
	gen idealnum=idealnumkids if idealnumkids<=9
	replace idealnum=9 if idealnumkids>10 & idealnumkids<=30
	lab def n 0 "0" 1 "1" 2 "2" 3 "3" 4 "4" 5 "5" 6 "6" 7 "7" 8 "8" 9 "9+"
	lab val idealnum n
	hist idealnum,  note("`n1' `n2'" "`n3'") frac scheme(s1color) ///
	  xtitle("Ideal Family Size") title("Self Reported Ideal Family Size") ///
	  xla(0/9, valuelabel) bcolor(navy)
	graph save "$Graphs/`idealfam'", replace
	graph export "$Graphs/`idealfam'.`format'", as(`format') replace
	restore

	foreach c of varlist agemay agefirstbirth fert {
		preserve
		if `"`c'"'=="agemay" {
			local cond agemay>=15&agemay<=45
			local char "Age of mother at time of question"
		}
		else if `"`c'"'=="agefirstbirth" {
			local cond agefirstbirth>=15&agefirstbirth<45
			local char "Age of Mother at First birth"
		}
		else if `"`c'"'=="fert"{
			local cond fert<=10
			local char "Total births at time of question"
		}
		bys id: gen num=_n
		keep if num==1
		collapse idealnumkids [pw=sweight], by(`c')
		if `"`c'"'=="fert" {
			sort idealnumkids
			gen vert=fert
			twoway line idealnumkids `c' if `cond' || line vert `c' if `cond', ///
			lpattern(dash) lcolor(black) title("Ideal Family Size by `char'")  ///
			scheme(s1color) ytitle("Average Desired Family Size") ///
			legend(label(1 "Ideal Number of Kids") label(2 "45 degrees")) ///	  
			xtitle("`char'")
		}		
		else {	
			line idealnumkids `c' if `cond', title("Ideal Family Size by `char'") ///
			scheme(s1color) xtitle("`char'") ytitle("Average Desired Family Size")
		}
	   graph save "$Graphs/idealfam_`c'", replace
			graph export "$Graphs/idealfam_`c'.`format'", as(`format') replace
		restore
	}

	local cond if agefirstbirth>=15&age<19
	local ii=1
	foreach condition in income=="low" income=="mid" income=="low"|income=="mid" {
		if `ii'==1 local name "Low"
		else if `ii'==2 local name "Middle"
		else if `ii'==3 local name "All"
		preserve
		gen attend1=1 if attendance==1|attendance==2
		replace attend1=0 if attendance==0
		gen attend2=1 if attendance==2
		replace attend2=0 if attendance==1|attendance==0
		keep `cond'&`condition'
		collapse attend1 attend2 educ, by(age)
		drop if age>19
		gen theoretical=age-5
		twoway line educ age if age>5 || line theoretical age if age>5, /*
		*/ title("Education by Age Group") subtitle("`name' Income") /*
		*/ xtitle("Child's age in years") ytitle("Education") scheme(s1color)
		graph export "$Graphs/EducAge`name'.eps", as(eps) replace
		twoway bar attend1 age if age>5, scheme(s1color) bcolor(navy) /*
		*/ title("Attendance by Age Group") subtitle("`name' Income") /*
		*/ xtitle("Child's age in years") ytitle("Proportion Attending") /*
		*/ note("Attendance refers to children who report always or sometimes attending")
		graph export "$Graphs/Attend1`name'.eps", as(eps) replace
		twoway bar attend2 age if age>5, scheme(s1color) bcolor(navy) /*
		*/ title("Attendance by Age Group") subtitle("`name' Income") /*
		*/ xtitle("Child's age in years") ytitle("Proportion Always Attending") /*
		*/ note("Attendance refers to children who report always attending")
		graph export "$Graphs/Attend2`name'.eps", as(eps) replace
		restore
		local ++ii
	}	
	}
}

if `sumstats2'==1 {

	*****************************************************************************
	*** (2d) Descriptive of desired
	*****************************************************************************
	estpost tab idealfam `cond'
	esttab using "$Tables/Summary/Ideal.xls", cells("b pct") replace
	estpost tab idealfam `cond'&twinfam==0
	esttab using "$Tables/Summary/Ideal.xls", cells("b pct") append
	estpost tab idealfam `cond'&twinfam>=1
	esttab using "$Tables/Summary/Ideal.xls", cells("b pct") append
	foreach num in `gplus' {
		estpost tab idealnumkids `cond'&`num'_plus==1&twin_`num'_fam==0
		esttab using "$Tables/Summary/Ideal.xls", cells("b pct") append

		estpost tab idealnumkids `cond'&`num'_plus==1&twin_`num'_fam==1
		esttab using "$Tables/Summary/Ideal.xls", cells("b pct") append
	}

	local t=2	
	foreach n in `gplus' {
		gen threshold`n'=(twin_`n'_fam==1 & idealnumkids==`t')
		replace threshold`n'=. if twin_`n'_fam==0
		local ++t
	}
	gen threshold2_5=1 if thresholdtwo==1|thresholdthree==1|thresholdfour==1|/*
	*/thresholdfive==1
	replace threshold2_5=0 if thresholdtwo==0|thresholdthree==0|/*
	*/thresholdfour==0|thresholdfive==0

	preserve

	gen inclevel="L" if inc_status=="L"
	replace inclevel="M" if inc_status=="LM"|inc_status=="UM"
	keep threshold* id inclevel
	collapse threshold*, by(id inclevel)
	
	estpost tabstat threshold2_5 thresholdt* thresholdfour thresholdfive, /*
	*/ by(inclevel) statistics(mean sd count) columns(statistics)
	mat counts = e(count)

	esttab using "$Tables/Summary/Threshold.txt", replace main(mean) aux(sd) /*
	*/ nostar unstack nonote nomtitle nonumber
	esttab matrix(counts) using "$Tables/Summary/Threshold.txt", append
	
	restore
	
   *****************************************************************************
	*** (2e) Descriptive of maternal health
	*****************************************************************************	
	if `graphs2'==1 {
		preserve
		collapse height weightk bmi [pw=sweight] `cond', by(id)
		hist weightk if weightk>30&weightk<200, frac scheme(s1color) ///
		  xtitle("Weight in kg") title("Mother's Weight at time of Survey")
		graph export "$Graphs/MotherWeight.eps", as(eps) replace
		hist height, frac scheme(s1color) ///
		  xtitle("Height in cm") title("Mother's Height at time of Survey")
		graph export "$Graphs/MotherHeight.eps", as(eps) replace
		hist bmi, frac scheme(s1color) ///
		  xtitle("BMI") title("Mother's BMI at time of Survey") ///
		  note("BMI is experessed as weight in kg squared/height in km")
		graph export "$Graphs/MotherBMI.eps", as(eps) replace
		restore
	}	

	gen lowheight=height<157.48
	replace lowheight=. if height==.
	gen lowweight=bmi<18.5
	replace lowweight=. if bmi==.
	
	estpost tab lowheight `cond'
	esttab using "$Tables/Summary/Health.xls", cells("b pct") replace
	estpost tab lowweight `cond'
	esttab using "$Tables/Summary/Health.xls", cells("b pct") append
}

if `trends'==1 {
	foreach inc in all low mid {
		if "`inc'"=="all" local cex
		else if "`inc'"=="low"|"`inc'"=="mid" local cex &income=="`inc'"	
		**************************************************************************
		*** (2f) Trends in education/fertility
		**************************************************************************
		preserve
		keep `cond'&age>15`cex'
		collapse educ `w', by(child_yob)
		sort child_yob
		twoway line educ child_yob, scheme(s1color)                /*
		*/ xtitle("DHS Birth Cohort") ytitle("Years of Education")
		graph export "$Graphs/eductrend_kids_`inc'.eps", as(eps) replace
		restore

		preserve
		keep `cond'`cex'
		bys id: gen keepcrit=_n
		keep if keepcrit==1
		collapse educf `w', by(year_birth)
		sort year_birth
		twoway line educf year_birth if year_birth>=1940&year_birth<1997, /* 
		*/ scheme(s1color) xtitle("DHS Birth Cohort") ytitle("Years of Education")
		graph export "$Graphs/eductrend_`inc'.eps", as(eps) replace
		restore

		
		foreach aa of numlist 0 35 {
			if `aa'==0 local title "Fertility (All women)"
			if `aa'==35 local title "Fertility (Women aged 35+)"
			preserve
			keep `cond'&agemay>`aa'`cex'
			bys id: gen keepcrit=_n
			keep if keepcrit==1
			collapse fert idealnumkids `w', by(year_birth)
			sort year_birth
			twoway line fert year_bi, lpattern(dash) || line idealnumkids year_birth, /*
			*/ scheme(s1color) legend(label(1 "Fertility per Woman") /*
			*/ label(2 "Desired Fertility")) ytitle("Births per Woman")
			graph export "$Graphs/ferttrend_`aa'_`inc'.eps", as(eps) replace
			restore
		}
	}
}

if `graphsMB'==1 {
	cap mkdir $Graphs/fitted
	preserve
	use "$Data/DHS_twins_mortality", clear
	keep _cou child_yob infantmortality twind height bmi fert malec
	gen totals=1
	replace infantmortality=0 if twind==1
	gen maleIMR=infantmortality if malec==1
	
	reg twind i._cou
	predict twin_resid, residuals
	reg twind i.fert
	predict twinfert_resid, residuals
	reg twind i._cou i.fert
	predict twinfertFE_resid, residuals
	foreach var of varlist infantmortality height bmi maleIMR {
		reg `var' i._cou
		predict `var'_resid, residuals
		reg `var' i.fert
		predict `var'fert_resid, residuals
		reg `var' i._cou i.fert
		predict `var'fertFE_resid, residuals
	}

	collapse infantmortality height bmi twind *_resid maleIMR fert /*
	*/ (count) totals, by(_cou child_yob)
	keep if totals>1000
	keep if infantmortality<0.3	
	gen logIMR=log(infantmortality)

	reg logIMR i._cou
	predict logIMR_resid, residuals
	reg logIMR fert
	predict logIMRfert_resid, residuals
	reg logIMR i._cou fert
	predict logIMRfertFE_resid, residuals
	
	foreach var of varlist infantmortality height bmi maleIMR logIMR {
		if `"`var'"'=="infantmortality" local title "Infant Mortality"
 		else if `"`var'"'=="height" local title "Height (cm)"
 		else if `"`var'"'=="bmi" local title "BMI"
		
		scatter twind `var', scheme(s1color) ytitle(Frequency of twins) ///
		  xtitle(`title') legend(label(1 "Twins"))
		graph export "$Graphs/twin_`var'.eps", as(eps) replace

		scatter twin_resid `var'_resid, scheme(s1color) ///
		  ytitle(Frequency of twins) xtitle(`title') ///
		  note("Each point represents the deviation from the country mean.") ///
		  legend(label(1 "Twins"))
		graph export "$Graphs/twin_`var'_resid.eps", as(eps) replace

 		scatter twinfert_resid `var'fert_resid, scheme(s1color) ///
		  ytitle(Frequency of twins) xtitle(`title') legend(label(1 "Twins")) ///
		  note("Scatter plot and conditions on fertility.")
		graph export "$Graphs/twin_`var'_fertresid.eps", as(eps) replace

 		scatter twinfertFE_resid `var'fertFE_resid, scheme(s1color) ///
		  ytitle(Frequency of twins) xtitle(`title') legend(label(1 "Twins")) ///
		  note("Each point represents the deviation from the country mean. Controlling for fertility.")
		graph export "$Graphs/twin_`var'_fertFEresid.eps", as(eps) replace
		
		local outdir "$Graphs/fitted"
		foreach fit in lfitci qfitci {
			scatter twind `var' || `fit' twind `var', scheme(s1color) ///
   		  ytitle(Frequency of twins) xtitle(`title') ///
	  		  legend(label(1 "Twins") label(2 "Fitted values") label(3 "95% CI"))
			graph export "`outdir'/twin_`var'_`fit'.eps", as(eps) replace

			scatter twin_resid `var'_resid || `fit' twin_resid `var'_resid, ///
			 scheme(s1color)  ytitle(Frequency of twins) xtitle(`title') ///
	  		 legend(label(1 "Twins") label(2 "Fitted values") label(3 "95% CI")) ///
			 note("Each point represents the deviation from the country mean.")			  
			graph export "`outdir'/twin_`var'_resid_`fit'.eps", as(eps) replace

			scatter  twinfert_resid `var'fert_resid || ///
			 `fit' twinfert_resid `var'fert_resid, scheme(s1color) ///
			  ytitle(Frequency of twins) xtitle(`title') ///
 	  		  legend(label(1 "Twins") label(2 "Fitted values") label(3 "95% CI")) ///
			  note("Scatter plot and fitted line conditional on fertility.")
			graph export "`outdir'/twin_`var'_fertresid_`fit'.eps", as(eps) replace

			scatter  twinfertFE_resid `var'fertFE_resid || ///
			 `fit' twinfertFE_resid `var'fertFE_resid, scheme(s1color) ///
			  ytitle(Frequency of twins) xtitle(`title') ///
 	  		  legend(label(1 "Twins") label(2 "Fitted values") label(3 "95% CI")) ///
			  note("Each point represents the deviation from the country mean. Controlling for fertility.")	  
			graph export "`outdir'/twin_`var'_fertFEresid_`fit'.eps", as(eps) replace

		}
	}
	sum totals
	restore
}

if `graphsSW'==1 {
	cap mkdir "$Graphs/SW"
  
  #delimit ;
  arrowplot twind height, groupvar(country) linesize(0.0025)
	 controls(motherage motheragesq agefirstbirth educf educfyrs_sq _yb*)
   regopts(`se') scheme(s1color) generate(hArrow) generateSE(hSE)
   groupname(Country) ytitle("Frequency Twin") xtitle("Mother's Height (cm)");
	graph export "$Graphs/SW/height_country.eps", as(eps) replace;
  #delimit cr
  gen lowBoundCountry = hArrow - 1.96*hSE
  tab lowBoundCountry

  preserve
	use "$Data/DHS_twins_mortality", clear
	gen IMRnotwin=infantmortality if twind!=1

  #delimit ;
  arrowplot twindfamily IMRnotwin `cond' `wt', groupvar(country)
	 linesize(0.005) controls(motherage motheragesq agefirstbirth educf
	 educfyrs_sq _yb*) regopts(`se') scheme(s1color) groupname(Country) 
   ytitle("Frequency Twin") xtitle("Any Infant Mortality");
	graph export "$Graphs/SW/IMR_country.eps", as(eps) replace;
  #delimit cr
  restore
}

********************************************************************************
**** (3) Twin predict regressions
********************************************************************************
if `twin'== 1 {

  fvset base 1 _cou
  fvset base 1 child_yob

  reg twind100 $twinpred height bmi i.child_yob i._cou `wt' `cond', `se'
  outreg2 $twinout using "$Tables/Twin/healthTest.xls", replace
  reg twind100 $twinpred i.child_yob i._cou `wt' `cond'&e(sample)==1, `se'
  outreg2 $twinout using "$Tables/Twin/healthTest.xls", append

	local cond1 child_yob>1989
	local cond2 child_yob<=1989

	foreach condtn in cond1 cond2 {
    local cc `cond'&``condtn''
    reg twind100 $twinpred height bmi i.child_yob i._cou `wt' `cc', `se'
    outreg2 $twinout using "$Tables/Twin/healthTest.xls", append
		reg twind100 $twinpred i.child_yob i._cou `wt' `cc'&e(sample)==1, `se'
    outreg2 $twinout using "$Tables/Twin/healthTest.xls", append
  }

  local out "$Tables/Twin/`TwinPred'.xls"
	
	eststo: reg twind100 $twinpredict `wt' `cond', `se'

	foreach inc in =="L" !="L"  {
		eststo: reg twind100 $twinpredict `wt' `cond'&inc_status`inc', `se'
	}
	
	local cond1 child_yob>1989
	local cond2 child_yob<=1989

	foreach condtn in cond1 cond2 {
		eststo: reg twind100 $twinpredict `wt' `cond'&``condtn'', `se'
	}

	eststo: reg twind100 $twinpredict /*antenatal*/ prenate* `wt', `se'

	estout est1 est2 est3 est4 est5 est6 using `out', keep($twinout pre*) ///
	  title("Probability of Giving Birth to Twins (DHS)")                 ///
	  varlabels(motherage "Age" motheragesq "Age Squared"  agefirstbirth  ///
	  "Age First Birth" educf "Education (years)" educfyrs_sq             ///
	  "Education squared" height "Height" bmi "BMI") `estopt' replace     ///
	  note("Notes: All specifications include a full set of year of birth"///
	  " and country dummies, and are estimated as linear probability  "   ///
	  " models. Twin is multiplied by 100 for presentation.  Height is "  ///
	  " measured in cm and BMI is weight in kg divided by height in "     ///
	  "metres squared. Prenatal care variables are only recoreded for "   ///
	  "recent births.  As such, column (6) is estimated only for that "   ///
	  "subset of births where these observations are made.")
	estimates clear


	*****************************************************************************
  **** (3a) Probit
  *****************************************************************************
  local out "$Tables/Twin/`TwinPred'Probit.xls"
 
  foreach var of varlist $twinout pre* {
      replace `var'=`var'/100
  }
  probit twind $twinpredict `wt' `cond', `se'
  estpost margins, dydx($twinout)
  estimates store est1

  local jj = 2
	foreach inc in =="L" !="L"  {
		probit twind $twinpredict `wt' `cond'&inc_status`inc', `se'
    estpost margins, dydx($twinout)
    estimates store est`jj'
    local ++jj
	}
	
	local cond1 child_yob>1989
	local cond2 child_yob<=1989

	foreach condtn in cond1 cond2 {
		probit twind $twinpredict `wt' `cond'&``condtn'', `se'
    estpost margins, dydx($twinout)
    estimates store est`jj'
    local ++jj
	}
 
	probit twind $twinpredict prenate* `wt', `se'
  estpost margins, dydx($twinout prenate_doc prenate_nurse prenate_none)
  estimates store est6

	estout est1 est2 est3 est4 est5 est6 using `out', keep($twinout pre*)  ///
	  title("Probability of Giving Birth to Twins (DHS, Probit)")          ///
	  varlabels(motherage "Age" motheragesq "Age Squared"  agefirstbirth   ///
	  "Age First Birth" educf "Education (years)" educfyrs_sq              ///
	  "Education squared" height "Height" bmi "BMI") `estopt' replace      ///
	  note("Notes: All specifications include a full set of year of birth" ///
	  " and country dummies, and are estimated as probit models. Marginal" ///
	  " effects at the mean are reported.  Margins are multiplied by 100 " ///
    "for presentation.  Height is"                                       ///
	  " measured in cm and BMI is weight in kg divided by height in "      ///
	  "metres squared. Prenatal care variables are only recoreded for "    ///
	  "recent births.  As such, column (6) is estimated only for that "    ///
	  "subset of births where these observations are made.")
	estimates clear
  foreach var of varlist $twinout pre* {
      replace `var'=`var'*100
  }
  
	*****************************************************************************
  **** (3a) Non-linear health
  *****************************************************************************
	local out "$Tables/Twin/`TwinPred'_alt.xls"
	fvset base 1 _cou
	fvset base 1 child_yob

	eststo: reg twind100 $twinpredict bmi_sq height_sq `wt' `cond', `se'
	foreach inc in =="L" !="L"  {
		eststo: reg twind100 $twinpredict bmi_sq height_sq `wt' `cond'& /*
		*/ inc_status`inc', `se'
	}
	local cond1 child_yob>1989
	local cond2 child_yob<=1989
	foreach cn in cond1 cond2 {
		eststo: reg twind100 $twinpredict bmi_sq height_sq `wt' `cond'&``cn'', `se'
  }

  estout est1 est2 est3 est4 est5 using `out', ///
	  keep($twinout bmi_sq height_sq) ///
	  title("Probability of Giving Birth to Twins (DHS)") ///
	  varlabels(motherage "Age" motheragesq "Age Squared"  agefirstbirth ///
	  "Age First Birth" educf "Education (years)" educfyrs_sq  ///
	  "Education squared" height "Height" bmi "BMI" bmi_sq "BMI squared" ///
	  height_sq "Height squared") `estopt' replace
	estimates clear
	
	*****************************************************************************
  **** (3b) Z-scores
  *****************************************************************************
	local out "$Tables/Twin/`TwinPred'_Z.xls"
	fvset base 1 _cou
	fvset base 1 child_yob
	foreach var of varlist educf height bmi {
		egen `var'_sd=sd(`var')
		egen `var'_mean=mean(`var')	
		gen Z`var'=(`var'-`var'_mean)/`var'_sd
		drop `var'_sd `var'_mean
	}

	eststo: reg twind motherage motheragesq agefirstbirth Zeducf Zbmi Zheight /*
	*/ i.child_yob i.bord `wt' `cond', `se'

	drop Zbmi Zheight Zeducf
	foreach var of varlist educf height bmi {
		bys _cou: egen `var'_sd=sd(`var')
		bys _cou: egen `var'_mean=mean(`var')	
		gen Z`var'=(`var'-`var'_mean)/`var'_sd
		drop `var'_sd `var'_mean
	}
	eststo: reg twind motherage motheragesq agefirstbirth Zeducf Zbmi Zheight /*
	*/ i.child_yob i.bord `wt' `cond', `se'
	
	estout est1 est2 using `out', keep(motherage motheragesq agefirstbirth ///
	  Zeducf Zbmi Zheight) title("Probability of Giving Birth to Twins (DHS)") ///
	  varlabels(motherage "Age" motheragesq "Age Squared"  agefirstbirth ///
	  "Age First Birth" Zeducf "Education (Z-score)" educfyrs_sq  ///
	  "Education squared" height "Height" bmi "BMI" bmi_sq "BMI squared" ///
	  height_sq "height squared") `estopt' replace
	estimates clear
  */
}
/*
********************************************************************************
**** (4a) OLS Pooled Regressions (plus Altonji and Oster bounds)
********************************************************************************
local out "$TAB/OLS/QQ_ols.xls"
cap rm `out'
cap rm "$TAB/OLS/QQ_ols.txt"

local y     school_zscore
local conds ALL==1 income=="low" income=="mid"
local names all low mid
tokenize `names'


foreach inc of local conds {
    preserve
    keep `cond'&`inc'
    egen keeper = rowmiss(fert `base' $age educf $H)
    keep if keeper == 0

    reg `y' fert `base' $age               `wt' 
    outreg2 using `out', excel append keep(fert $age)

    reg `y' fert `base' $age $H            `wt' 
    outreg2 using `out', excel append keep(fert $age $H)
    local maxR = e(r2)*2
    psacalc fert delta, mcontrol(`base' $age) rmax(`maxR')
    local OsterH_`1' = string(`r(output)', "%5.3f")
    
    reg `y' fert `base' $age $S $H         `wt' 
    outreg2 using `out', excel append keep(fert $age $S $H)
    local maxR = e(r2)*2
    psacalc fert delta, mcontrol(`base' $age) rmax(`maxR')
    local OsterSH_`1' = string(`r(output)', "%5.3f")

    reg `y' fert `base' $age $S $H i.bord `wt'
    outreg2 using `out', excel append keep(fert $age $S $H)
    
    restore
    macro shift
}
file open  Oster using "$TAB/OLS/OsterValues.txt", write replace
file write Oster "`OsterH_all',`OsterSH_all'" _n
file write Oster "`OsterH_low',`OsterSH_low'" _n
file write Oster "`OsterH_mid',`OsterSH_mid'" _n
file close Oster



********************************************************************************
**** (4b) OLS n+ Regressions (plus Altonji and Oster bounds)
********************************************************************************
local c1 `base' $age
local c2 `base' $age $H
local c3 `base' $age $S $H 
local c4 `base' $age $S $H i.bord
local y  school_zscore
local x  fert

    
tokenize `fnames'
foreach condition of local conditions {

    local ests
    local ecnt 1
    local OUT "$Tables/OLS/`1'"

    foreach n in `gplus' {
        preserve
        keep `cond'&`condition'&`n'_plus==1
        egen keeper = rowmiss(`y' `base' $age $H educf fert)
        keep if keeper == 0
        
        foreach e of numlist 1(1)4 {
            eststo: reg school_zscore fert `c`e'' `wt'
            local ests `ests' est`ecnt'
            local maxR = e(r2)*2
            if `e'>1 {
                psacalc fert delta, mcontrol(`base' $age) rmax(`maxR')
                estadd scalar Oster=r(output): est`ecnt'
            }
            local ++ecnt
        }
        restore
    }

    #delimit ;
    estout `ests' using "`OUT'.txt", replace
    cells(b(star fmt(%-9.3f)) se(fmt(%-9.3f) par))
    stats (N r2 Oster, fmt(%9.0g %9.2f %9.3f))
    starlevel ("*" 0.10 "**" 0.05 "***" 0.01);
    #delimit cr
    estimates clear
    macro shift
}




local out "$Tables/OLS/QQ_plusgroups.xls"
cap rm `out'
cap rm "$Tables/OLS/QQ_plusgroups.txt"
foreach n in `gplus' {
    preserve
    keep `cond'&`n'_plus==1			
    egen keeper = rowmiss(fert `base' $age educf $H)
    keep if keeper == 0

    reg `y' fert `base' $age       `wt' 
    outreg2 fert $age        using `out', excel append

    reg `y' fert `base' $age $H    `wt' 
    outreg2 fert $age $H     using `out', excel append
    local maxR = e(r2)*2
    psacalc fert delta, mcontrol(`base' $age) rmax(`maxR')
    local OsterH_`n' = string(`r(output)', "%5.3f")

    reg `y' fert `base' $age $S $H `wt'
    outreg2 fert $age $S $H  using `out', excel append
    local maxR = e(r2)*2
    psacalc fert delta, mcontrol(`base' $age) rmax(`maxR')
    local OsterSH_`n' = string(`r(output)', "%5.3f")

    reg `y' fert `base' $age $S $H i.bord `wt'
    outreg2 fert $age $S $HP using `out', excel append
    restore
}
file open  Oster using "$TAB/OLS/OsterValues_nPlus.txt", write replace
file write Oster "`OsterH_two'  ,`OsterSH_two'  " _n
file write Oster "`OsterH_three',`OsterSH_three'" _n
file write Oster "`OsterH_four' ,`OsterSH_four' " _n
file close Oster


********************************************************************************
**** (5) Reduced form using twins at birth order N
********************************************************************************
if `RF'==1 {
    tokenize `fnames'
    foreach condition of local conditions {
		
		local n1=1
		local n2=2
		local n3=3
		local estimates

		local OUT "$Tables/RF/`1'"

		foreach n in `gplus' {
			preserve
			keep `cond'&`condition'&`n'_plus==1			

			foreach y of varlist $outcomes {
				eststo: reg `y' twin_`n'_fam `base' $age $S $H `wt', `se'
				eststo: reg `y' twin_`n'_fam `base' $age $H `wt' if e(sample), `se'
				eststo: reg `y' twin_`n'_fam `base' `wt' if e(sample), `se'

				local estimates `estimates' est`n3' est`n2' est`n1'
				local n1=`n1'+3
				local n2=`n2'+3
				local n3=`n3'+3
			}
			restore
		}

		estout `estimates' using "`OUT'.xls", replace `estopt' `varlab' /*
		*/ keep(twin_* $age $S $H)
		estimates clear
		macro shift
 }
}

********************************************************************************
**** (6a) IV (using twin at order n), subsequent inclusion of twin predictors
********************************************************************************
local c1 `base'
local c2 `base' $age
local c3 `base' $age $H
local c4 `base' $age $S $H i.bord
local y  school_zscore
local x  fert

    
tokenize `fnames'
foreach condition of local conditions {

    local ests1
    local ests2
    local ecnt 1
    local OUT "$Tables/IV/`1'"

    foreach n in `gplus' {
        preserve
        keep `cond'&`condition'&`n'_plus==1
        egen keeper = rowmiss(`y' `base' $age $H educf fert)
        keep if keeper == 0
        
        
        local p partial(`base') savefirst 
        local z twin_`n'_fam

        foreach e of numlist 1(1)4{
            eststo: ivreg2 `y' `c`e'' (`x'=`z') `wt', `se' `p' savefp(fst`ecnt')
            local ests2 `ests2' est`ecnt'
            local ests1 `ests1' fst`ecnt'fert
            mat first=e(first)
            estadd scalar KPF=first[8,1]: fst`ecnt'fert
            estadd scalar KPp=first[7,1]: fst`ecnt'fert
            local ++ecnt
        }
        restore
    }

    local expv $age $H
    estout `ests2' using "`OUT'.txt", replace `estopt'
    #delimit ;
    estout `ests1' using "`OUT'_first.txt", replace
    cells(b(star fmt(%-9.3f)) se(fmt(%-9.3f) par))
    stats (N KPF KPp, fmt(%9.0g %9.2f %9.3f))
    starlevel ("*" 0.10 "**" 0.05 "***" 0.01);
    #delimit cr
    estimates clear
    macro shift
}
*/

********************************************************************************
**** (6a) IV (using twin at order n), subsequent inclusion of twin predictors
********************************************************************************
if `IVnl'==1 {
  local estimates
  local ii = 1

  tokenize `fnames'
	foreach condition of local conditions {
		foreach n in `gplus' {
			preserve
			keep `cond'&`condition'&`n'_plus==1

			foreach y in $outcomes {
        #delimit ;
        eststo: ivreg2 `y' `base' $age $S $H height_sq bmi_sq (fert=twin_`n'_fam)
        `wt', `se' savefirst savefp(f`n') partial(`base');

        local estimates `estimates' est`ii';
        local ++ii;
        #delimit cr
      }
      restore
    }  
  }
  estout `estimates' using "$Tables/IV/NonLinIV.xls", replace `estopt' `varlab' /*
	*/ keep(fert $age $S $H height_sq bmi_sq)
  estimates clear
}

********************************************************************************
**** (6c) IV split by fee non-fee status
********************************************************************************
if `IVfee'==1 {

    #delimit ;
    generat free = min(5,child_yob-1980) if country=="Albania";
    replace free = min(4,child_yob-1980) if country=="Armenia";
    replace free = min(6,child_yob-1988) if country=="Bangladesh";
    replace free = min(7,child_yob-1988) if country=="Cameroon";
    replace free = min(7,child_yob-1986) if country=="Egypt";         
    replace free = min(7,child_yob-1981) if country=="Ethiopia";      
    replace free = min(7,child_yob-1992) if country=="Ghana";         
    replace free = min(7,child_yob-1975) if country=="Guyana";        
    replace free = min(7,child_yob-1993) if country=="India";         
    replace free = min(7,child_yob-1990) if country=="Kenya";         
    replace free = min(5,child_yob-1978) if country=="Kyrgyz-Republic";
    replace free = min(8,child_yob-1985) if country=="Lesotho";       
    replace free = min(6,child_yob-1990) if country=="Madagascar";    
    replace free = min(7,child_yob-1981) if country=="Malawi";        
    replace free = min(7,child_yob-1949) if country=="Morocco";       
    replace free = min(8,child_yob-1990) if country=="Mozambique";    
    replace free = min(7,child_yob-1986) if country=="Nigeria";       
    replace free = min(6,child_yob-1989) if country=="Rwanda";
    replace free = min(8,child_yob-1996) if country=="Swaziland";     
    replace free = min(8,child_yob-1982) if country=="Uganda";        
    replace free = min(8,child_yob-1986) if country=="Tanzania";      
    replace free = min(8,child_yob-1986) if country=="Zambia";
    replace free = 0 if free<0|free==.;
    #delimit cr

    gen twin_two_famFree   = twin_two_fam*free
    gen twin_three_famFree = twin_three_fam*free
    gen twin_four_famFree  = twin_four_fam*free
    gen fertFree           = fert*free

    local n1=1
    local n2=2
    local n3=3
    local n4=4
    local estimates
    local fstage

    local OUT "$Tables/IV/FeeInteraction"
    foreach n in `gplus' {
        preserve
        keep `cond'&`n'_plus==1
        
        foreach y in $outcomes {
            #delimit ;
            eststo: ivreg2 `y' `base' $S $HP i.agemay free (fert fertF=twin_`n'_fam*)       
            `wt', `se' partial(`base');
            eststo: ivreg2 `y' `base' $S $H  i.agemay free (fert fertF=twin_`n'_fam*)        
            `wt', `se' partial(`base');
            eststo: ivreg2 `y' `base' $H     i.agemay free (fert fertF=twin_`n'_fam*) 
            `wt' if e(sample), `se' partial(`base');
            eststo: ivreg2 `y' `base'             free (fert fertF=twin_`n'_fam*)
            `wt' if e(sample), `se' partial(`base');
            #delimit cr
            
            local estimates `estimates' est`n4' est`n3' est`n2' est`n1' 
            local n1=`n1'+4
            local n2=`n2'+4
            local n3=`n3'+4
            local n4=`n4'+4				
        }
        restore
    }
    estout `estimates' using "`OUT'.xls", replace `estopt' `varlab' /*
    */ keep(fert fertFree free)
    estimates clear

    local feetype fees no-fees
    local feecond free==0 free>0
    tokenize `feetype'
    foreach condition of local feecond {
        local n1=1
	local n2=2
	local n3=3
	local n4=4
	local estimates
	local fstage

	local OUT "$Tables/IV/`1'"

        foreach n in `gplus' {
            preserve
            keep `cond'&`condition'&`n'_plus==1
            
            foreach y in $outcomes {
                *`y'`ll'p
                eststo: ivreg2 `y' `base' $age $S $HP (fert=twin_`n'_fam) `wt',      /*
                */ `se' savefirst savefp(f`n4') partial(`base')
                eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt',       /*
                */ `se' savefirst savefp(f`n3') partial(`base')
                eststo: ivreg2 `y' `base' $age $H (fert=twin_`n'_fam) `wt'           /*
		*/ if e(sample), `se' savefirst savefp(f`n2') partial(`base')
                eststo: ivreg2 `y' `base' (fert=twin_`n'_fam) `wt' if e(sample),     /*
		*/ `se' savefirst savefp(f`n1') partial(`base')

                local estimates `estimates' est`n4' est`n3' est`n2' est`n1' 
                local fstage `fstage' f`n1'fert f`n2'fert f`n3'fert f`n4'fert
                local n1=`n1'+4
                local n2=`n2'+4
                local n3=`n3'+4
                local n4=`n4'+4				
            }
            restore
        }
        
        estout `estimates' using "`OUT'.xls", replace `estopt' `varlab' /*
        */ keep(fert $age $S $H $HP)
        estout `fstage' using "`OUT'_first.xls", replace `estopt' `varlab' /*
        */ keep(twin_* $age $S $H $HP)
        
        estimates clear
        macro shift
    }
}


********************************************************************************
**** (9) New results 04/01/2013.  This first section is a quick look at whether
***  truncated and non truncated fertility look similar in terms of 1st stage.
***  Also, the IMR test (pre-twins) is included as `twinoccur'
********************************************************************************
if `compl_fert'==1 {
	local n1=1
	local n2=2
	local n3=3
	local estimates

	foreach age of numlist 35 40 {
		foreach n in `gplus' {
			local c  `cond'&agemay>`age'&`n'_plus==1
			local ce `cond'&agemay>`age'&`n'_plus==1&e(sample)
			foreach y of varlist $outcomes {
				eststo: reg fert `base' $age $S $H twin_`n'_fam `wt' `c'&`y'!=., `se'
				eststo: reg fert `base' $age $S twin_`n'_fam `wt' `ce', `se'
				eststo: reg fert `base' twin_`n'_fam `wt' `ce', `se'

				local estimates `estimates' est`n3' est`n2' est`n1' 
				local n1=`n1'+3
				local n2=`n2'+3
				local n3=`n3'+3
			}
		}
	}
		
	estout `estimates' using "$Tables/New/NewFirst.xls", replace ///
	keep(twin* malec $age $S $H _contracep*) `estopt'
	
	estimates clear
}
/*
preserve
use "$Data/DHS_twins_mortality", clear
tab wealth, gen(_wealth)
tab educf , gen(_educf)

gen tta=age if twind==1
bys id: egen twinage=min(tta)
gen twinagedif=twinage-age
	
gen treated=twinfamily>=1&twinagedif>1&twinagedif!=.
replace treated=. if twinfamily>=1&twinagedif<1
tab treated

replace infantmortality=infantmortality*100
local bvar $age i._cou i.year_birth twind
foreach n in `gplus' {
    local c  if age>=1&age<16&`n'_plus==1
    local ce `cond'&`n'_plus==1&e(sample)
    eststo: reg infantmortality treated `bvar' $S $H `wt' `c', `se'
    eststo: reg infantmortality treated `bvar' $S    `wt' `ce', `se'
    eststo: reg infantmortality treated `bvar'       `wt' `ce', `se'
    eststo: reg infantmortality treated $age         `wt' `ce', `se'
}
	
local estimates est4 est3 est2 est1 est8 est7 est6 est5 est12 est11 est10 est9
estout `estimates' using "$TAB/IMRTest.txt", replace ///
    keep(treated $S $H) `estopt'	
estimates clear
restore
*/

if `twinoccur_iv'==1 {
	preserve
	use "$Data/DHS_twins_mortality", clear

	local n1=1
	local n2=2
	local n3=3
	local estimates
	local firststage
	tempfile before
	
	foreach n in `gplus' {
		save `before', replace
		keep `cond'&`n'_plus==1
		foreach y of varlist infantmortality {
			eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt', /*
			*/ `se' savefirst savefp(f`n3')
			eststo: ivreg2 `y' `base' $age $S (fert=twin_`n'_fam) `wt' /*
			*/ if e(sample), `se' savefirst savefp(f`n2')
			eststo: ivreg2 `y' `base' (fert=twin_`n'_fam) `wt' if e(sample), /*
			*/ `se' savefirst savefp(f`n1')

			local estimates `estimates' est`n3' est`n2' est`n1' 
			local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
			local n1=`n1'+3
			local n2=`n2'+3
			local n3=`n3'+3
		}
		use `before', clear
	}

	estout `estimates' using "$Tables/New/IMRtest.xls", replace ///
	keep(fert malec $age $S $H) `estopt' `varlab'

	estout `firststage' using "$Tables/New/IMRtest_f.xls", replace ///
	keep(twin_* malec $age $S $H) `estopt' `varlab' 
	
	estimates clear
	restore
}


********************************************************************************
**** (10) Conley et al approach
***  Here we are assuming that:
***     quality  = beta*quantity + gamma*twin + epsilon.
***     quantity = pi*twin + nu
***
***  Typical instrumental assumption is that gamma=0, but Conley et al relax
***  this so that gamma can be a small effect, or as they say, we have "prior
***  information that implies that gamma is near 0 but perhaps not exactly 0".
********************************************************************************
mat cbounds1 = J(3,4,.)
local ii = 1
foreach n in two three four {
    local c `cond'&`n'_plus==1
    preserve
    keep `c'
    gen j = _n
    merge 1:1 j using "../Results/gamma/gammasNigeria", gen(_mergeGamma)

    qui reg school_zscore `base' $age
    predict Ey, resid
    qui reg fert          `base' $age
    predict Ex, resid
    qui reg twin_`n'_fam  `base' $age
    predict Ez, resid
    local ESH
    local items = 2
    drop _educf1
    drop _wealth1
    foreach var of varlist $S $H {
        qui reg `var' `base' $age
        predict E`var', resid
        local ESH `ESH' E`var'
        local ++items
    }
 
    *------    UCI     -----------------------------------------------------
    plausexog uci school_zscore `base' $age $S $H (fert = twin_`n'_fam), /*
    */ gmin(0) gmax(0.008) grid(2) level(.90) vce(robust)
    local c1 = e(lb_fert)
    local c2 = e(ub_fert)
    dis "lower bound = `c1', upper bound=`c2'"
    
    *------    LTZ     -----------------------------------------------------
    if `"`n'"'=="four" local --items
    matrix omega_eta = J(`items',`items',0)
    sum gamma
    local gmean = r(mean)
    local gvar  = r(sd)^2
    matrix omega_eta[1,1] = `gvar'
    matrix mu_eta = J(`items',1,0)
    matrix mu_eta[1,1] = `gmean'

    plausexog ltz Ey `ESH' (Ex = Ez), distribution(special, gamma) seed(2702)
    local c3 = e(lb_Ex)
    local c4 = e(ub_Ex)
    dis "lower bound = `c3', upper bound=`c4'"

    *------  GRAPHING   -----------------------------------------------------
    foreach num of numlist 0(1)10 {
        matrix om`num'=J(`items', `items', 0)
        matrix om`num'[1,1] = ((`num'/10)*0.1/sqrt(12))^2
        matrix mu`num'=J(`items', 1, 0)
        matrix mu`num'[1,1]= (`num'/10)*0.1/2
        local d`num' = (`num'/10)*0.1
    }

    #delimit ;
    plausexog ltz Ey `ESH' (Ex = Ez), omega(omega_eta) mu(mu_eta) level(0.95)
    graph(Ex) graphomega(om0 om1 om2 om3 om4 om5 om6 om7 om8 om9 om10)
    graphmu(mu0 mu1 mu2 mu3 mu4 mu5 mu6 mu7 mu8 mu9 mu10)
    graphdelta(`d0' `d1' `d2' `d3' `d4' `d5' `d6' `d7' `d8' `d9' `d10');
    graph export "$Graphs/Conley/LTZ_`n'.eps", as(eps) replace;
    #delimit cr

    restore
    mat cbounds1[`ii',1]=`=`c1''
    mat cbounds1[`ii',2]=`=`c2''
    mat cbounds1[`ii',3]=`=`c3''
    mat cbounds1[`ii',4]=`=`c4''
    
    local ++ii
}
mat colnames cbounds1 = LowerBound UpperBound LowerBound UpperBound
mat rownames cbounds1 = TwoPlus ThreePlus FourPlus
mat2txt, matrix(cbounds1) saving("$TAB/Conley/ConleyGamma.txt") /*
*/ format(%6.4f) replace

exit

********************************************************************************
*** (11) Is twins crossing desired threshold related to family characteristics?
*** First version compares twins crossing threshold to all families, second only
*** to other twin families (more reasonable).
********************************************************************************
if `thresholdtest'==1 {
	gen threshold2=(twin_two_fam==1   & idealnumkids==2)
	gen threshold3=(twin_three_fam==1 & idealnumkids==3)
	gen threshold4=(twin_four_fam==1  & idealnumkids==4)
	gen threshold5=(twin_five_fam==1  & idealnumkids==5)	

	gen threshold=threshold2+threshold3+threshold4+threshold5

	replace threshold=threshold*100
	sum threshold*

	reg threshold $twinpredict `wt', `se'
	outreg2 $twinout using $Tables/crossing.xls, excel replace
	test educf educfyrs_sq height bmi
	local Ftestall=r(p)
	
	local t=2
	foreach num in `gplus' {
		reg threshold`t' $twinpredict `wt' if `num'_plus==1, `se'
		outreg2 $twinout using $Tables/crossing.xls, excel append
		test educf educfyrs_sq height bmi
		local Ftest`num'=r(p)
		
		local ++t
	}
	preserve
	keep if twinfamily>0&twinfamily!=.
	collapse threshold motherage motheragesq agefirstbirth educf educfyrs_sq /*
	*/ height bmi child_yob _cou sweight, by(id)
	replace child_yob=round(child_yob)
	reg threshold $twinpredict `wt', `se'
	outreg2 $twinout using $Tables/crossing_twins.xls, excel replace
	test educf educfyrs_sq height bmi
	local Ftwinall=r(p)
	restore

	local t=2
	foreach num in `gplus' {
		reg threshold`t' $twinpredict `wt' if twinfamily>0&twinfamily!=.&`num'_plus==1, `se'
		outreg2 $twinout using $Tables/crossing_twins.xls, excel append
		test educf educfyrs_sq height bmi
		local Ftwin`num'=r(p)
		
		local ++t
	}	
	
	dis "`Ftestall' `Ftesttwo' `Ftestthree' `Ftestfour' `Ftestfive'"
	dis "`Ftwinall' `Ftwintwo' `Ftwinthree' `Ftwinfour' `Ftwinfive'"

	
	/*
	gen fertshortfall=fert-idealnumkids
	reg idealnumkids $twinpredict `wt', `se'
	outreg2 $twinout using $Tables/desiredtest.tex, tex(pretty) replace
	reg fertshortfall $twinpredict `wt', `se'
	outreg2 $twinout using $Tables/desiredtest.tex, tex(pretty) append
	
	
	gen lowinc=income=="low"
	cap log close
	log using "$Tables/DesiredSum.txt", text replace
	foreach num of numlist -1 0 1 {
		sum fert idealnumkids agemay educf height bmi educ school_zscore /*
		*/ noeduc highschool infantmortality childmortality agefirstbirth /*
		*/ motherage lowinc if idealfam==`num'
	}
	cap log close
	*/
}

********************************************************************************
**** (12) Twin treated versus untreated balance
********************************************************************************
if `balance'==1 {
    estimates clear
    preserve
    #delimit ;
    local bvar educf educp bmi underweight height agefirstbirth;
    local vnam `" "Mother Education"  "Father Education" "Mother BMI"
          "Mother is underweight" "Mother Height (cm)" "Age at First Birth" "';
    #delimit cr

    collapse `bvar' motherage twindfamily fert, by(id)
    replace motherage = round(motherage)
    keep if motherage>17

    gen T          = twindfamily
    gen varname    = ""
    gen twinAve    = .
    gen notwinAve  = .
    gen difference = .
    gen diffSe     = .
    gen star       = ""
    local iter     = 1
    tokenize `bvar'
    foreach n of local vnam {
        dis "Iteration is: `iter', var is `n'"
        qui reg ``iter'' T i.motherage i.fert
        qui replace varname    = "`n'" in `iter'
        qui replace twinAve    = _b[T]+_b[_cons] in `iter'
        qui replace notwinAve  = _b[_cons] in `iter'
        qui replace difference = _b[T] in `iter'
        qui replace diffSe     = _se[T] in `iter'
        qui replace star       = "*"   in `iter' if abs(_b[T]/_se[T])>1.646
        qui replace star       = "**"  in `iter' if abs(_b[T]/_se[T])>1.962
        qui replace star       = "***" in `iter' if abs(_b[T]/_se[T])>2.581

        local ++iter
    }
    keep varname twinAve notwinAve difference star diffSe
    keep in 1/6
    list
    tempfile f1 f2
    save `f1'
    restore

    preserve
    use "$Data/DHS_twins_mortality", clear
    keep if motherage>17
    keep if two_plus==1|three_plus==1|four_plus==1
    collapse infantmortality motherage fert twindfamily, by(id)
    replace motherage = round(motherage)
    gen T = twindfamily
    replace infantmortality = infantmortality*1000
    reg infantmortality T i.motherage i.fert
    gen varname    = "Infant mortality (pre-twin)"
    gen twinAve    = _b[T]+_b[_cons] in 1
    gen notwinAve  = _b[_cons] in 1
    gen difference = _b[T] in 1
    gen diffSe     = _se[T] in 1
    gen star       = "*"   in 1 if abs(_b[T]/_se[T])>1.646
    replace star   = "**"  in 1 if abs(_b[T]/_se[T])>1.962
    replace star   = "***" in 1 if abs(_b[T]/_se[T])>2.581
    keep varname twinAve notwinAve difference star diffSe
    keep in 1
    save `f2'
    use `f1', clear
    append using `f2'

    foreach var of varlist twinAve notwinAve difference diffSe {
        gen str5 tvar = string(`var', "%05.3f")
        drop `var'
        gen `var' = tvar 
        drop tvar
    }
    
    order varname twinAve notwinAve difference star diffSe
    outsheet varname twinAve notwinAve difference star diffSe in 1/7 /*
    */ using "$Tables/Balance.tex", replace delimiter("&") noquote
    restore

    foreach num in two three four {
        gen Treated`num' = twin_`num'_fam==1
        replace Treated`num' = abs(Treated`num'-1)

        gen varname    = ""
        gen twinAve    = .
        gen notwinAve  = .
        gen difference = .
        gen diffSe     = .
        gen star       = ""

        local iter = 1
        foreach var of local bvar {
            reg `var' Treated`num'
            replace varname = "`var'" in `iter'
            replace twinAve      = _b[Treated]+_b[_cons] in `iter'
            replace notwinAve    = _b[_cons] in `iter'
            replace difference   = _b[Treated] in `iter'
            replace diffSe       = _se[Treated] in `iter'
            replace star = "*"   in `iter' if abs(_b[Treated]/_se[Treated])>1.646
            replace star = "**"  in `iter' if abs(_b[Treated]/_se[Treated])>1.962
            replace star = "***" in `iter' if abs(_b[Treated]/_se[Treated])>2.581
            local ++iter
        }
        foreach var of varlist twinAve notwinAve difference diffSe {
            gen str5 tvar = string(`var', "%05.3f")
            drop `var'
            gen `var' = tvar 
            drop tvar
        }
        order varname twinAve notwinAve difference star diffSe
        outsheet varname twinAve notwinAve difference star diffSe in 1/8 /*
        */ using "$Tables/Balance`num'.tex", replace delimiter("&") noquote
        drop varname twinAve notwinvge difference star diffSe
    }
    restore
}

********************************************************************************
**** (14) Run for each country
********************************************************************************
if `country'==1 {
    levelsof country
    local countries = `"`r(levels)'"'

    local n1=1
    local estimates
    local firststage
    local colnames
    
    local base malec _yb* _age* _contracep* `add'
    
    foreach cc of local countries {
        preserve
        keep if country=="`cc'"
        count
        if `r(N)'== 0 {
            restore
            exit
        }

        foreach n in `gplus' {
            local c  `cond'&`n'_plus==1
            foreach y of varlist $outcomes {
                 eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' `c', /*
                 */ `se' savefirst savefp(f`n1')

                 local estimates `estimates' est`n1' 
                 local firststage `firststage' f`n1'fert
	         local colnames `cc'
	         local ++n1
  	    }
        }
        restore	
    }	

    estout `estimates' using "$Tables/IV/Countries.xls", replace ///
    keep(fert malec $age $S $H) mlabels(`colnames') `estopt' `varlab'

    estout `firststage' using "$Tables/IV/Countries_f.xls", replace ///
    keep(twin_* malec $age $S $H) mlabels(`colnames') `estopt' `varlab' 
	
    estimates clear	
}

********************************************************************************
**** (15a) IV Using adjusted fertility and adjusted twins (survival only)
********************************************************************************
if `adj_fert'==1&`ADJIV'==1 {
	tokenize `fnames'
	foreach condition of local conditions {

		local n1=1
		local n2=2
		local n3=3
		local estimates
		local fstage

		local OUT "$Tables/IV/ADJ`1'"

		foreach n in `gplus' {
			preserve
			keep `cond'&`condition'&`n'_plus==1&(twinfamily==2|twinfamily==0)

			foreach y of varlist $outcomes {
				eststo: ivreg2 `y' `base' $age $S $H (ADJfert=twin_`n'_fam) `wt',/*
				*/ `se' savefirst savefp(f`n3')
				eststo: ivreg2 `y' `base' $age $H (ADJfert=twin_`n'_fam) `wt'    /*
				*/ if e(sample), `se' savefirst savefp(f`n2')
				eststo: ivreg2 `y' `base' (ADJfert=twin_`n'_fam) `wt'            /*
				*/ if e(sample), `se' savefirst savefp(f`n1')

				local estimates `estimates'  est`n3' est`n2' est`n1' 
				local fstage `fstage' f`n1'ADJfert f`n2'ADJfert f`n3'ADJfert
				local n1=`n1'+3
				local n2=`n2'+3
				local n3=`n3'+3
			}
			restore
		}

		estout `estimates' using "`OUT'.xls", replace `estopt' `varlab' /*
		*/ keep(ADJfert $age $S $H)
		estout `fstage' using "`OUT'_first.xls", replace `estopt' `varlab' /*
		*/ keep(twin_* $age $S $H)

		estimates clear
		macro shift
	}
}

********************************************************************************
**** (15b) IV plus twins using survival-adjusted fertility and twins 
********************************************************************************
if `adj_fert'==1&`ADJtwin'==1 {
	local n1=1
	local n2=2
	local n3=3
	local estimates
	local firststage
 
	foreach n in `gplus' {
		preserve
		keep `cond'&ADJ`n'_plus_twins==1&(twinfamily==2|twinfamily==0)

		foreach y of varlist $outcomes {
			eststo: ivreg2 `y' `base' $age $S $H (ADJfert=twin_`n'_fam) `wt', /*
			*/ `se' savefirst savefp(f`n3')
			eststo: ivreg2 `y' `base' $age $S (ADJfert=twin_`n'_fam) `wt'     /*
			*/ if e(sample), `se' savefirst savefp(f`n2')
			eststo: ivreg2 `y' `base' (ADJfert=twin_`n'_fam) `wt'             /*
			*/ if e(sample), `se' savefirst savefp(f`n1')

			local estimates `estimates' est`n3' est`n2' est`n1' 
			local firststage `firststage' f`n1'ADJfert f`n2'ADJfert f`n3'ADJfert
			local n1=`n1'+3
			local n2=`n2'+3
			local n3=`n3'+3
		}
		restore
	}

	estout `estimates' using "$Tables/IV/ADJ`IVt'.xls", replace ///
	keep(ADJfert malec $age $S $H) `estopt' `varlab'

	estout `firststage' using "$Tables/IV/ADJ`IVt1'.xls", replace ///
	keep(twin_* malec $age $S $H) `estopt' `varlab' 
	
	estimates clear

}

********************************************************************************
**** (15c) IV with desired using survival-adjusted fertility and twins 
********************************************************************************
if `adj_fert'==1&`ADJdesire'==1 {
	cap gen idealbarrier=floor(desiredfert_region)
	
	local endog ADJfert ADJfertXthreshold
	foreach inc in /*all low mid F*/ M {
		if "`inc'"=="all" local cex
		else if "`inc'"=="low"|"`inc'"=="mid" local cex &income=="`inc'"
		else if "`inc'"=="F"|"`inc'"=="M" local cex &gender=="`inc'"

		local n1=1
		local n2=2
		local n3=3
		local estimates
		local firststage

		local t=2
		foreach n in `gplus' {
			preserve
			keep `cond'&ADJ`n'_plus==1&(twinfamily==2|twinfamily==0) `cex'
			gen threshold=(ADJtwin_`n'_fam==1 & idealbarrier==`t')
			gen ADJfertXthreshold=ADJfert*threshold
			gen ADJdesired=idealbarrier<=`t'
			
			cap gen twin`n'Xthreshold = twin_`n'_fam*threshold
			local insts twin_`n'_fam twin`n'Xthreshold

			foreach y of varlist $outcomes {
				eststo: ivreg2 `y' `base' $age $S $H ADJdesired (`endog' = `insts') /*
				*/ `wt', `se' savefirst savefp(f`n3')
				eststo: ivreg2 `y' `base' $age $S ADJdesired (`endog' = `insts')    /*
				*/ `wt' if e(sample), `se' savefirst savefp(f`n2')
				eststo: ivreg2 `y' `base' ADJdesired (`endog' = `insts')            /*
				*/ `wt' if e(sample), `se' savefirst savefp(f`n1')

				local estimates `estimates' est`n3' est`n2' est`n1'
				local firststage `firststage' f`n1'ADJfert f`n2'ADJfert f`n3'ADJfert
		
				local n1=`n1'+3
				local n2=`n2'+3
				local n3=`n3'+3
				}
			local ++t
			drop threshold ADJfertXthreshold ADJdesired
			restore
		}

		estout `estimates' using "$Tables/IV/ADJ`IVdes'_`inc'.xls", replace ///
		 keep(ADJfert ADJfertXthreshold $age $S $H) `estopt' `varlab'

		estout `firststage' using "$Tables/IV/ADJ`IVdes1'_`inc'.xls", replace ///
		 keep(twin* $age $S $H) `estopt' `varlab'
	
		estimates clear
	}
}

********************************************************************************
**** (17) Program same sex IV estimates to have an over-identifying test
********************************************************************************
if `overID'==1 {
	local base _country* _yb* _age* _contracep* `add'
	local gplus two three four
	local jj=1
	foreach ii of numlist 1(1)6 {
		local n`ii'=`ii'
	}
	local estimates
	local fstage
	local estimates2
	local fstage2

	local OUT "$Tables/OverID/OverID"
	local OUT2 "$Tables/OverID/SameSex"

	gen int3  = (1-smix12)*boy3
	gen int4a = (1-smix123)*boy3
	gen int4b = (1-smix123)*boy4

	
	local twoSel     boy1
	local threeSel   malec boy12 girl12 int3 
	local fourSel    malec boy12 girl12 boy123 girl123 int3 int4*
	local twoInsts   smix12
	local threeInsts smix123
	local fourInsts  smix1234

	mat SarganStat = J(3,3,.)
	mat SarganP    = J(3,3,.)

	foreach n in `gplus' {
		preserve
		keep `cond'&`n'_plus==1			

		foreach y of varlist $outcomes {
			eststo: ivreg2 `y' `base' $age $S $H ``n'Sel' (fert = ``n'Insts') `wt', /*
			*/ `se' partial(`base') savefirst savefp(f`n6')
			eststo: ivreg2 `y' `base' $age $S $H ``n'Sel' (fert = ``n'Insts' /*
			*/ twin_`n'_fam) `wt', `se' partial(`base') savefirst savefp(f`n5')
			mat SarganStat[`jj',1] = `e(j)'
			mat SarganP[`jj',1]    = `e(jp)'

			eststo: ivreg2 `y' `base' $age $H ``n'Sel' (fert = ``n'Insts') `wt'     /*
			*/ if e(sample), `se' partial(`base') savefirst savefp(f`n4')
			eststo: ivreg2 `y' `base' $age $H ``n'Sel' (fert=``n'Insts' twin_`n'_fam) /*
			*/ `wt' if e(sample), `se' partial(`base') savefirst savefp(f`n3')
			mat SarganStat[`jj',2] = `e(j)'
			mat SarganP[`jj',2]    = `e(jp)'

			eststo: ivreg2 `y' `base' ``n'Sel' (fert = ``n'Insts') `wt'             /*
			*/ if e(sample), `se' partial(`base') savefirst savefp(f`n2')
			eststo: ivreg2 `y' `base' ``n'Sel' (fert = ``n'Insts' twin_`n'_fam)  /*
			*/ `wt' if e(sample), `se' partial(`base') savefirst savefp(f`n1')
			mat SarganStat[`jj',3] = `e(j)'
			mat SarganP[`jj',3]    = `e(jp)'
			mat list SarganStat
			mat list SarganP

			
			local estimates `estimates'  est`n6' est`n4' est`n2' 
			local fstage `fstage' f`n1'fert f`n3'fert f`n5'fert
			local estimates2 `estimates2'  est`n5' est`n3' est`n1' 
			local fstage2 `fstage2' f`n2'fert f`n4'fert f`n6'fert
			foreach ii of numlist 1(1)6 {
				local n`ii'=`n`ii''+6
			}
			local ++jj
		}
		restore
	}

	matrix rownames SarganStat = TwoPlus ThreePlus FourPlus
	matrix colnames SarganStat = S+H H Base
	matrix rownames SarganP    = TwoPlus ThreePlus FourPlus
	matrix colnames SarganP    = S+H H Base
	mat2txt, matrix(SarganStat) saving("$Tables/OverID/SarganStat.txt") /*
	*/ format(%6.4f) replace
	mat2txt, matrix(SarganP) saving("$Tables/OverID/SarganP.txt") /*
	*/ format(%6.4f) replace

	estout `estimates2' using "`OUT2'.xls", replace `estopt' `varlab' /*
	*/ keep(fert $age $S $H)
	estout `fstage2' using "`OUT2'_first.xls", replace `estopt' `varlab' /*
	*/ keep(smix* $age $S $H)
	estout `estimates' using "`OUT'.xls", replace `estopt' `varlab' /*
	*/ keep(fert $age $S $H)
	estout `fstage' using "`OUT'_first.xls", replace `estopt' `varlab' /*
	*/ keep(smix* boy1* girl1* twin_* $age $S $H)

	estimates clear
	local base malec _country* _yb* _age* _contracep* `add'
}

********************************************************************************
**** (19) MMR Tests
********************************************************************************
if `MMR'==1 {
	local outfile "$Tables/MMR/MMRTest"
	cap rm "`outfile'.txt"
	cap rm "`outfile'.xls"
	cap rm "`outfile'.tex"
	preserve
	bys id: gen mothercount=_n
	keep if mothercount==1
	merge 1:1 id using "$Data/TwinsMMR", gen(_mergeMM)

	gen anyMMR=numMaternalDeaths!=0
	gen deathsperSister=numMaternalDeaths/numSisters
	gen SMA2=SiblingMeanAge^2
	gen SMA3=SiblingMeanAge^3
	gen heightLess155=height<155.5

	count
	sum anyMMR height if heightLess155==1
	sum anyMMR height if heightLess155==0	
	
	foreach y of varlist anyMMR numMaternalDeaths deathsperSister {
		reg `y' numSister SiblingMeanAge SMA* `base' $age $S heightL `wt', robust
		outreg2 numSister SiblingMeanAge SMA* $age $S heightL using "`outfile'.xls",/*
		*/ excel append
		outreg2 numSister SiblingMeanAge SMA* $age $S heightL using "`outfile'.tex",/*
		*/ tex(pretty) append
	}

	restore
}


********************************************************************************
**** (20) Selection into twinning based on healthy survival
********************************************************************************
if `select'==1 {
    local lee      = 1
    local alderman = 1
    local htgraph  = 1
    
    preserve
    bys id: gen mothercount=_n
    keep if mothercount==1
    merge 1:1 id using "$Data/TwinsMMR", gen(_mergeMM)

    gen anyMMR=numMaternalDeaths>=1&numMaternalDeaths<=5 if numMaternalDeaths!=.
  	gen deathsperSister=numMaternalDeaths/numSisters
    gen SMA2=SiblingMeanAge^2
    gen SMA3=SiblingMeanAge^3
  	gen heightLess140=height<140

    qui reg anyMMR $age `base'
	  predict concentratedMMR if e(sample), residuals

    foreach num of numlist 1(1)4 {
       gen unhealthy`num' = height<(135+5*`num')|bmi<(15.5+0.5*`num')
       gen healthy`num'  = (unhealthy`num'-1)*-1
    }

    ****************************************************************************
    *** (a) Lee Bounds
    ****************************************************************************
    if `lee'==1 {
        cap rm "$Tables/MMR/LeeBounds.txt"
        local con if motherage>18&motherage<40&_mergeMM==3&/*
        */ agefirstbirth>15&agefirstbirth<40

        gen twinfam100=100 if twinfamily==1|twinfamily==2
        replace twinfam100=0 if twinfamily==0

        local ti tight(motherage)
        file open lee using "$Tables/MMR/LeeBounds.txt", write replace
        foreach n of numlist 1(1)4 {
            leebounds twinfam100 healthy`n' `con' `wt', select(anyMMR) cie
            mat def est=e(b)
            mat def ser=e(V)
            mat2txt, matrix(est) saving("$Tables/MMR/LeeBounds.txt") append
            mat2txt, matrix(ser) saving("$Tables/MMR/LeeBounds.txt") append
        }
        drop twinfam100
    }
    ****************************************************************************
    *** (b) Alderman-style bounds
    ****************************************************************************
    if `alderman'==1 {
        local out "$Tables/MMR/Alderman.tex"

        tab educf
        gen twinfam100=100 if twinfamily==1|twinfamily==2
        replace twinfam100=0 if twinfamily==0
        reg twinfam100 $twinpredict `wt' `cond'
        outreg2 mother* agefir educf* height bmi using `out', replace tex(pr)

        foreach num of numlist 1(1)4 {
            sum deathsperSister if healthy`num'==1
            local healthexp   =round(`r(mean)'*`r(N)')
            dis `healthexp'
            sum deathsperSister if healthy`num'==0
            local unhealthexp =round(`r(mean)'*`r(N)')
            dis `unhealthexp'
            
            set seed 2203
            gen rnumb = runiform()
            sort healthy`num' rnumb
            bys healthy`num': gen counter=_n
            gen     repeat=1 if counter<=`healthexp'&healthy`num'==1
            replace repeat=1 if counter<=`unhealthexp'&healthy`num'==0

            expand 2 if repeat==1, gen(created)
            replace twinfam100 = 100 if created==1&healthy`num'==0
            replace twinfam100 = 0   if created==1&healthy`num'==1
            reg twinfam100 $twinpredict `wt' `cond'
            outreg2 mother* agefir educf* height bmi using `out', append tex(pr)

            drop if created==1
            drop rnumb repeat counter created
        }
    }

    ****************************************************************************
    *** (c) Graph of sister height and MMR
    ****************************************************************************
    if `htgraph'==1 {
  	  	 gen cut=.
    		 local it=1
    		 foreach cut of numlist 140 145 150 155 160 165 170 175 {
        	   replace cut=`it' if height<`cut'&cut==.
	    	   	 local ++it
  		   }
	    	 label def ht 1 "<140" 2 "145" 3 "150" 4 "155" 5 "160" 6 "165" 7 "170" 8 "175+"
	    	 label values cut ht

  	  	 sum height, d
    		 local mid = r(p50)
    		 local psd = r(p50)+r(sd)
  	  	 local msd = r(p50)-r(sd)
  	  	 dis "`mid'"


         local n1 "Each point represents the average per age group, "
         local n2 "concentrating out country and age FEs."
         local n3 "The vertical line represents that mean height of `mid'cm."
	       collapse concentratedMMR, by(cut)
	       scatter concentratedMMR cut, xlabel(1 2 3 4 5 6 7 8, valuelabel)   ///
	       note("`n1'`n2'" "`n3'") xtitle("Height (woman)") scheme(s1mono)    ///
	       ytitle("Maternal Mortality (sisters)") xline(4.1, lpattern(solid))       
	       *xline(`msd' `psd', lpattern(dash))
	       graph export "$Graphs/MMRcuts.eps", as(eps) replace
	       restore
    }
}


********************************************************************************
**** (21) Pooled IV (see Angrist Lavy Schlosser, 2010)
********************************************************************************
if `pool'==1 {
	tokenize `fnames'
	foreach condition of local conditions {
		
		local OUT "$Tables/IV/PoolAlt2`1'"

		preserve
		gen poolsample=(two_plus==1|three_plus==1|four_plus==1|five_plus==1)
		local ins1 purgedtwo purgedthree
		local ins2 purgedtwo purgedthree purgedfour
		local ins3 purgedtwo purgedthree purgedfour purgedfive

		keep `cond'&`condition'&poolsample==1			

		local s1 two_plus==1|three_plus==1
		local s2 two_plus==1|three_plus==1|four_plus==1
		local s3 two_plus==1|three_plus==1|four_plus==1|five_plus==1
		
		foreach y of varlist $outcomes {
			*PURGE INSTRUMENTS AND RUN FOR FULL CONTROLS
			foreach group in two three four five  {
				qui reg twin_`group'_fam `base' $age $S $HP `wt' if `group'_plus==1, `se'
				predict WPT
				gen purged`group'= twin_`group'_fam - WPT
				replace purged`group'=purged`group'*twin_`group'_fam
				drop WPT
			}
			foreach samp of numlist 1 2 3 {
				eststo: ivreg2 `y' `base' $age  $S $HP (fert = `ins`samp'') `wt' if /*
				*/ `s`samp'', `se' savefirst savefp(f1`samp') partial(`base')
			}
			drop `ins3'

			*PURGE INSTRUMENTS AND RUN FOR PARTIAL CONTROLS
			foreach group in two three four five  {
				qui reg twin_`group'_fam `base' $age $S $H `wt' if `group'_plus==1, `se'
				predict WPT
				gen purged`group'= twin_`group'_fam - WPT
				replace purged`group'=purged`group'*twin_`group'_fam
				drop WPT
			}
			foreach samp of numlist 1 2 3 {
				eststo: ivreg2 `y' `base' $age $S $H (fert = `ins`samp'') `wt' if /*
				*/ `s`samp'', `se' savefirst savefp(f2`samp') partial(`base')
				gen sg`samp'=e(sample)
			}
			drop `ins3'

         *PURGE INSTRUMENTS AND RUN FOR PARTIAL CONTROLS
			foreach group in two three four five  {
				qui reg twin_`group'_fam `base' $age $H `wt' if `group'_plus==1, `se'
				predict WPT
				gen purged`group'= twin_`group'_fam - WPT
				replace purged`group'=purged`group'*twin_`group'_fam
				drop WPT
			}
			foreach samp of numlist 1 2 3 {
				eststo: ivreg2 `y' `base' $age $H (fert=`ins`samp'') `wt' if `s`samp'' /*
				*/ &sg`samp'==1, `se' savefirst savefp(f3`samp') partial(`base')
			}
			drop `ins3'
			
			*PURGE INSTRUMENTS AND RUN FOR BASE CONTROLS
			foreach group in two three four five  {
				qui reg twin_`group'_fam `base' `wt' if `group'_plus==1, `se'
				predict WPT
				gen purged`group'= twin_`group'_fam - WPT
				replace purged`group'=purged`group'*twin_`group'_fam
				drop WPT
			}
			foreach samp of numlist 1 2 3 {
				eststo: ivreg2 `y' `base' (fert=`ins`samp'') `wt' if `s`samp''/*
				*/ &sg`samp'==1, `se' savefirst savefp(f4`samp') partial(`base')
			}
			drop `ins3'
		}
		restore

		estout est10 est7 est4 est1 est11 est8 est5 est2 est12 est9 est6 est3   /*
		*/ using "`OUT'.xls", replace `estopt' `varlab' keep(fert $S $H)
		estout f41fert f31fert f21fert f11fert f42fert f32fert f22fert f12fert  /*
		*/ f43fert f33fert f23fert f13fert using "`OUT'_first.xls", replace     /*
		*/ `estopt' `varlab' keep(purged* $S $H)
		estimates clear
		macro shift
	}
}

********************************************************************************
**** (22) Clean up
********************************************************************************
log close
