/* Regressions 3.01              damiancclarke             yyyy-mm-dd:2013-04-15
*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|----8
*/

/* This file contains all regression results that are being used in the Twin 
Instrument paper.  These include
	- Summary.xls (sum stats)
	- Summary_Birthorder.xls
   - Twin_Predict.xls
   - ...

This do file uses as input the data file DHS_Twins, which is generated by the
file Twin_Setup.do.  Currently it includes all DHS files available up until 
October 2013.  Files are downloaded and imported to Stata using the files 
DHS_Import.py and DHS_Multicountry.do.

Last edit:
* May 10th, 2014: testing for 35+ as well.
* December 17th, 2013: considerable rewrite based on comments in 22 Nov email.
Can revert by going back to git commit Nov 11 2013.
* September 12th, 2013: Address Paul Dev's comment about treatment
* August 5th, 2013: Update figures and tables based on Sonia's comme-
nts on early draft.
*/

clear all
version 11.2
cap log close
set more off
set mem 2000m
set matsize 2000

*#include
foreach ado in ivreg2 outreg2 estout ranktest mat2txt {
	cap which `ado'
	if _rc!=0 ssc install `ado'
}

*******************************************************************************
*** (0) Globals and Locals
*******************************************************************************
* DIRECTORIES
global Base "~/investigacion/Activa/Twins"
global Data "$Base/Data"
global Tables "$Base/Results/Outreg"
global Graphs "$Base/Results/Graphs"
global Log "$Base/Log"
global ConAdos "$Base/Do/PlausExog"
global Source "$Base/Do"

* VARIABLES
global outcomes school_zscore
global sumstatsM fert idealnumkids agemay educf height bmi underweight exceedfam
global sumstatsC educ school_zscore noeduc infantmortality childmortality
global twinpredict motherage motheragesq agefirstbirth educf educfyrs_sq /*
*/ height bmi i.child_yob i._cou 
global twinout motherage motheragesq agefirstbirth educf educfyrs_sq height bmi
global base malec i._cou i.year_birth i.age i.contracep_intent 
global age motherage motheragesq motheragecub agefirstbirth 
global S educf educfyrs_sq
global H height bmi 
global HP height bmi /*antenatal*/ prenate*
global balance fert idealnumkids agefirstbirth educf educp height underweight /*
*/ /*antenatal*/ prenate* motherage childmortality infantmortal 

* ECONOMETRIC SPECIFICATIONS
local se cluster(id)
local wt [pw=sweight]
local cond if agefirstbirth>=15&age<19

* FILE SPECIFICATIONS
local gplus two three four five
local births none
local MAGE 0


if `"`births'"'=="none" {
	local add
}
else if `"`births'"'=="bord" {
	global base malec i._cou i.year_birth i.age i.contracep_intent i.bord
	global twinpredict motherage motheragesq agefirstbirth educf educfyrs_sq /*
	*/ height bmi i.child_yob i._cou i.bord
	global twinout motherage motheragesq agefirstbirth educf educfyrs_sq height bmi
	local add _bord*
}
else if `"`births'"'=="space" {
	global base malec i._cou i.year_birth i.age i.contracep_intent i.bord birthspac
	global twinpredict motherage motheragesq agefirstbirth educf educfyrs_sq /*
	*/ height bmi i.child_yob i._cou i.bord birthspacing
	global twinout motherage motheragesq agefirstbirth educf educfyrs_sq height /*
	*/ bmi birthspacing
	local add _bord* birthspacing
}

if `MAGE'==35 {
	global Tables "$Base/Results/Outreg/over35"
	global Graphs "$Base/Results/Graphs/over35"

	local cond if agefirstbirth>=15&age<19&agemay>=35
}


* FILE NAMES
local Sum      Summary
local SumC     SummaryChild
local SumBord  Summary_Birthorder
local TwinPred Twin_Predict
local IVt      Base_IV_twins
local IVt1     Base_IV_twins_firststage
local IVdes    Desire_IV_reg
local IVdes1   Desire_IV_firststage_reg
local IVdesS   Desire_IV_sep
local IVdesS1  Desire_IV_sep_firststage
local IVpref   PrefThreshold_IV
local IVpref1  PrefThreshold_IV_firststage


* FIGURES
local famsize   famsize
local famsize_e famsize_exceed
local twinbord  twinbybord
local idealfam  idealfamsize


* REPEATED OPTIONS
local estopt cells(b(star fmt(%-9.3f)) se(fmt(%-9.3f) par)) /*
*/ stats (r2 N, fmt(%9.2f %9.0g)) starlevel ("*" 0.10 "**" 0.05 "***" 0.01)
local varlab varlabels(/*malec "Male Child"*/ agemay "Mother's age" magesq    /*
*/ "Mother's Age Squared" agefirstbirth "Age First Birth" educf           /*
*/ "Mother's Education" educfyrs_sq "Mother's Education Squared" height   /*
*/ "Height" bmi "BMI")


*SWITCHES (1 if run, else not run)
local sumstats 0
  local graphs 0
local sumstats2 0
  local graphs2 0
local trends 0
local twin 0
local ols 0
local IV 1
local desire 0
local desire_sep 0
local pref 0
local new 0
local twinoccur_ols 0
local twinoccur_iv 0
local conley 0
local thresholdtest 0
local balance 0
local intense 0
local country 0

#delimit ;
local conditions
  ALL==1
  age>11
  age<=11
  child_yob<=1984
  child_yob>1984
  income=="low"
  income=="mid"
  gender=="F"
  gender=="M"
  ;

local fnames
  All
  Under11
  Over10
  BornPre1985
  BornPost1984
  LowIncome
  MidIncome
  Girls
  Boys
  ;
  
#delimit cr

*******************************************************************************
*** (1) Setup (+ discretionary choices)
*******************************************************************************
log using "$Log/Twin_Regressions.log", text replace
use "$Data/DHS_twins", clear

drop if twinfamily>2
keep if _merge==3
replace bmi=. if bmi>50
replace height=. if height>240
replace height=. if height<80
replace educ=. if age<6
replace educ=. if educ>25
replace educf=. if educf>25
replace birthspacing=. if birthspacing<8|birthspacing==999

tab _cou, gen(_country)
tab year_birth, gen(_yb)
tab age, gen(_age)
tab contracep_intent, gen(_contracep)
tab bord, gen(_bord)
local base malec _country* _yb* _age* _contracep* `add'

*******************************************************************************
*** (2) Summary Stats
*******************************************************************************
if `sumstats'==1 {
	
	if c(os)=="Windows" local format png
	else if c(os)=="Unix" local format eps
	***************************************************************************
	*** (2a) Tables
	***************************************************************************
	* (A) By twins
	local opts cells("count mean sd min max")

	gen cat="Low Inc, Singleton" if twind==0 & inc_status=="L"
	replace cat="Low Inc, Twin" if twind==1 & inc_status=="L"
	replace cat="Mid Inc, Single" if twind==0 & inc_status!="L"
	replace cat="Mid Inc, Twin" if twind==1 & inc_status!="L"
	encode cat, gen(catnum)
	
	local numkids "Number of Children"
	local nummothers "Number of Mothers"
	local numcountry "Number of Countries"
	foreach num of numlist 1(1)4 {
		cap drop count
		gen count = 1
		replace count=. if catnum!=`num'
		foreach var of local sumstats {
			replace count=. if `var'==.
		}
		count if count==1
		local kk = "`: display %9.0fc r(N)'"

		local numkids "`numkids' `sep'" "`kk'"

		bys id: gen n=_n
		count if count==1&n==1
		local mm = "`: display %9.0fc r(N)'"
		local nummothers "`nummothers' `sep'" "`mm'"
		drop n

		bys _cou: gen n=_n
		count if count==1&n==1
		if `num'==1|`num'==3 {
			local numcountry "`numcountry' `sep' `r(N)'`sep'`r(N)' "
		}
		drop n
	}

	count
	local kidcount = "`: display %9.0fc r(N)'"
	sum twind
	scalar at = "`: display %7.4f r(mean)'"
	scalar as = "`: display %7.4f r(sd)'"	
	sum twind if inc_status=="L"
	scalar lt = "`: display %7.4f r(mean)'"
	scalar ls = "`: display %7.4f r(sd)'"
	sum twind if inc_status!="L"
	scalar mt = "`: display %7.4f r(mean)'"
	scalar ms = "`: display %7.4f r(sd)'"

	sum bord if twind==1
	scalar abm = "`: display %7.3f r(mean)'"
	scalar abs = "`: display %7.3f r(sd)'"
	sum bord if twind==1 & inc_status=="L"
	scalar lbm = "`: display %7.3f r(mean)'"
	scalar lbs = "`: display %7.3f r(sd)'"
	sum bord if twind==1 &  inc_status!="L"
	scalar mbm = "`: display %7.3f r(mean)'"
	scalar mbs = "`: display %7.3f r(sd)'"


	preserve
	gen exceedfam=idealfam==1
	collapse $sumstatsM, by(id cat)
	count
	local mothercount = "`: display %9.0fc r(N)'"

	file open resfile using "$Tables/Summary/Count.txt", write replace
	file write resfile "`numcountry' & 67 \\" _n
	file write resfile "`numkids' & `kidcount' \\" _n
	file write resfile "`nummothers' & `mothercount' \\" _n
	file write resfile "Fraction Twin & \multicolumn{2}{c}{ `=scalar(lt)'" ///
	  "}& \multicolumn{2}{c}{ `=scalar(mt)' } & `=scalar(at)'\\" _n
	file write resfile "& \multicolumn{2}{c}{(`=scalar(ls)')" ///
	  "}& \multicolumn{2}{c}{(`=scalar(ms)')} & (`=scalar(as)')\\" _n
	file write resfile "Birth Order Twin & \multicolumn{2}{c}{ `=scalar(lbm)'" ///
	  "}& \multicolumn{2}{c}{ `=scalar(mbm)' }& `=scalar(abm)'\\" _n
	file write resfile "& \multicolumn{2}{c}{(`=scalar(lbs)')" ///
	  "}& \multicolumn{2}{c}{(`=scalar(mbs)')}& (`=scalar(abs)')\\" _n
	file write resfile "`mothercount'"
	file close resfile
	
	estpost tabstat $sumstatsM, by(cat) statistics(mean sd) listwise ///
	 columns(statistics)
	esttab using "$Tables/Summary/`Sum'.txt", replace main(mean) aux(sd) /*
	*/ nostar unstack noobs nonote nomtitle nonumber
	restore

	preserve
	decode _cou, gen(WBcountry)
	gen colvar=inc_status=="L"
	collapse colvar, by(WBcountry _year)
	gen income="Low" if colvar==1
	replace income="Middle" if colvar==0
	drop colvar
	order WBcountry income _year
	sort WBc _year
	outsheet using "$Tables/Summary/Countries.csv", delimit(;) nonames replace
	restore

	preserve
	use "$Data/DHS_twins.dta", clear
	gen cat="Low Inc, Singleton" if twind==0 & inc_status=="L"
	replace cat="Low Inc, Twin" if twind==1 & inc_status=="L"
	replace cat="Mid Inc, Single" if twind==0 & inc_status!="L"
	replace cat="Mid Inc, Twin" if twind==1 & inc_status!="L"
	encode cat, gen(catnum)
	estpost tabstat $sumstatsC, by(cat) statistics(mean sd) listwise ///
	 columns(statistics)
	esttab using "$Tables/Summary/`SumC'.txt", replace main(mean) aux(sd) /*
	*/ nostar unstack noobs nonote nomtitle nonumber
	clear
	restore
	***************************************************************************
	*** (2b) Graphical
	*** graph 1: total births by family type (twins vs non-twins)
	*** graph 2: total births by family type for families who exceed desired
	*** graph 3: Proportion of twins by birth order
	*** graph 4: Desired family size
	*** graphs 5-7: Desired family size by mother's characteristics
	***************************************************************************
	if `graphs'==1 {

	twoway kdensity fert if twinfamily>0&twinfamily!=., lpattern(dash) bw(2) || ///
	  kdensity fert if twinfamily==0, bw(2) scheme(s1color) ytitle("Density") ///
	  legend(label(1 "Twin Family") label(2 "Singleton Family")) ///
	  title("Total births by Family Type") xtitle("total children ever born") 
	graph save "$Graphs/`famsize'", replace
	graph export "$Graphs/`famsize'.`format'", as(`format') replace


	twoway kdensity fert if twinfamily>0&twinfamily!=. & fert > idealnumkids, ///
	  bw(2) lpattern(dash) || kdensity fert if twinfamily==0 & ///
	  fert > idealnumkids & twin_bord >= idealnumkids, bw(2) scheme(s1color) ///
	  legend(label(1 "Twin Family") label(2 "Singleton Family")) ///
	  ytitle("Density") title("Total births by Family Type") ///
	  xtitle("total children ever born") ///
	  subtitle("For families who exceed desired family size")
	graph save "$Graphs/`famsize_e'", replace
	graph export "$Graphs/`famsize_e'.`format'", as(`format') replace

	
	local note1 "Single births are 1-frac(twins). "
	local note2 "Total fraction of twins is represented by the solid line."
	local gnote "`note1' `note2'"
	sum twind
	local twinave=r(mean)	
	preserve
	collapse twind [pw=sweight], by(bord)
	gen twinave=`twinave'	
	line twind bord if bord<11, lpattern(dash) title("Twinning by birth order") ///
	  ytitle("Fraction twins") xtitle("Birth Order") yline(0.0189) ///
	  note(`gnote') scheme(s1color)
	graph save "$Graphs/`twinbord'", replace
	graph export "$Graphs/`twinbord'.`format'", as(`format') replace

	twoway bar twind bord if bord<11 || ///
	line twinave bord if bord<11, title("Twinning by birth order") ///
	  ytitle("Fraction twins") xtitle("Birth Order")  ///
	  note(`gnote') scheme(s1color)
	graph save "$Graphs/`twinbord'_hist", replace
	graph export "$Graphs/`twinbord'_hist.`format'", as(`format') replace
	restore

	
	local n1 "Total sample of families is 1,586,899.  2.61% of families report "
	local n2 "'up to god', and 4.39% provide"
	local n3 "a non-numeric response. These are omitted here."	
	preserve
	collapse idealnumkids [pw=sweight], by(id)
	gen idealnum=idealnumkids if idealnumkids<=9
	replace idealnum=9 if idealnumkids>10 & idealnumkids<=30
	lab def n 0 "0" 1 "1" 2 "2" 3 "3" 4 "4" 5 "5" 6 "6" 7 "7" 8 "8" 9 "9+"
	lab val idealnum n
	hist idealnum,  note("`n1' `n2'" "`n3'") frac scheme(s1color) ///
	  xtitle("Ideal Family Size") title("Self Reported Ideal Family Size") ///
	  xla(0/9, valuelabel) bcolor(navy)
	graph save "$Graphs/`idealfam'", replace
	graph export "$Graphs/`idealfam'.`format'", as(`format') replace
	restore

	foreach c of varlist /*agemay agefirstbirth*/ fert {
		preserve
		if `"`c'"'=="agemay" {
			local cond agemay>=15&agemay<=45
			local char "Age of mother at time of question"
		}
		else if `"`c'"'=="agefirstbirth" {
			local cond agefirstbirth>=15&agefirstbirth<45
			local char "Age of Mother at First birth"
		}
		else if `"`c'"'=="fert"{
			local cond fert<=10
			local char "Total births at time of question"
		}
		bys id: gen num=_n
		keep if num==1
		collapse idealnumkids [pw=sweight], by(`c')
		if `"`c'"'=="fert" {
			sort idealnumkids
			gen vert=fert
			twoway line idealnumkids `c' if `cond' || line vert `c' if `cond', ///
			lpattern(dash) lcolor(black) title("Ideal Family Size by `char'")  ///
			scheme(s1color) ytitle("Average Desired Family Size") ///
			legend(label(1 "Ideal Number of Kids") label(2 "45 degrees")) ///	  
			xtitle("`char'")
		}		
		else {	
			line idealnumkids `c' if `cond', title("Ideal Family Size by `char'") ///
			scheme(s1color) xtitle("`char'") ytitle("Average Desired Family Size")
		}
	   graph save "$Graphs/idealfam_`c'", replace
	   graph export "$Graphs/idealfam_`c'.`format'", as(`format') replace
		restore
	}

	local ii=1
	foreach condition in income=="low" income=="mid" income=="low"|income=="mid" {
		if `ii'==1 local name "Low"
		else if `ii'==2 local name "Middle"
		else if `ii'==3 local name "All"
		preserve
		gen attend1=1 if attendance==1|attendance==2
		replace attend1=0 if attendance==0
		gen attend2=1 if attendance==2
		replace attend2=0 if attendance==1|attendance==0
		keep `cond'&`condition'
		collapse attend1 attend2 educ, by(age)
		drop if age>19
		gen theoretical=age-5
		twoway line educ age if age>5 || line theoretical age if age>5, /*
		*/ title("Education by Age Group") subtitle("`name' Income") /*
		*/ xtitle("Child's age in years") ytitle("Education") scheme(s1color)
		graph export "$Graphs/EducAge`name'.eps", as(eps) replace
		twoway bar attend1 age if age>5, scheme(s1color) bcolor(navy) /*
		*/ title("Attendance by Age Group") subtitle("`name' Income") /*
		*/ xtitle("Child's age in years") ytitle("Proportion Attending") /*
		*/ note("Attendance refers to children who report always or sometimes attending")
		graph export "$Graphs/Attend1`name'.eps", as(eps) replace
		twoway bar attend2 age if age>5, scheme(s1color) bcolor(navy) /*
		*/ title("Attendance by Age Group") subtitle("`name' Income") /*
		*/ xtitle("Child's age in years") ytitle("Proportion Always Attending") /*
		*/ note("Attendance refers to children who report always attending")
		graph export "$Graphs/Attend2`name'.eps", as(eps) replace
		restore
		local ++ii
	}	
	}
}

if `sumstats2'==1 {

	*****************************************************************************
	*** (2d) Descriptive of desired
	*****************************************************************************
	estpost tab idealfam `cond'
	esttab using "$Tables/Summary/Ideal.xls", cells("b pct") replace
	estpost tab idealfam `cond'&twinfam==0
	esttab using "$Tables/Summary/Ideal.xls", cells("b pct") append
	estpost tab idealfam `cond'&twinfam>=1
	esttab using "$Tables/Summary/Ideal.xls", cells("b pct") append
	foreach num in `gplus' {
		estpost tab idealnumkids `cond'&`num'_plus==1&twin_`num'_fam==0
		esttab using "$Tables/Summary/Ideal.xls", cells("b pct") append

		estpost tab idealnumkids `cond'&`num'_plus==1&twin_`num'_fam==1
		esttab using "$Tables/Summary/Ideal.xls", cells("b pct") append
	}

	local t=2	
	foreach n in `gplus' {
		gen threshold`n'=(twin_`n'_fam==1 & idealnumkids==`t')
		replace threshold`n'=. if twin_`n'_fam==0
		local ++t
	}
	gen threshold2_5=1 if thresholdtwo==1|thresholdthree==1|thresholdfour==1|/*
	*/thresholdfive==1
	replace threshold2_5=0 if thresholdtwo==0|thresholdthree==0|/*
	*/thresholdfour==0|thresholdfive==0

	preserve

	gen inclevel="L" if inc_status=="L"
	replace inclevel="M" if inc_status=="LM"|inc_status=="UM"
	keep threshold* id inclevel
	collapse threshold*, by(id inclevel)
	
	estpost tabstat threshold2_5 thresholdt* thresholdfour thresholdfive, /*
	*/ by(inclevel) statistics(mean sd count) columns(statistics)
	mat counts = e(count)

	esttab using "$Tables/Summary/Threshold.txt", replace main(mean) aux(sd) /*
	*/ nostar unstack nonote nomtitle nonumber
	esttab matrix(counts) using "$Tables/Summary/Threshold.txt", append
	
	restore
	
   *****************************************************************************
	*** (2e) Descriptive of maternal health
	*****************************************************************************	
	if `graphs2'==1 {
		preserve
		collapse height weightk bmi [pw=sweight] `cond', by(id)
		hist weightk if weightk>30&weightk<200, frac scheme(s1color) ///
		  xtitle("Weight in kg") title("Mother's Weight at time of Survey")
		graph export "$Graphs/MotherWeight.eps", as(eps) replace
		hist height, frac scheme(s1color) ///
		  xtitle("Height in cm") title("Mother's Height at time of Survey")
		graph export "$Graphs/MotherHeight.eps", as(eps) replace
		hist bmi, frac scheme(s1color) ///
		  xtitle("BMI") title("Mother's BMI at time of Survey") ///
		  note("BMI is experessed as weight in kg squared/height in km")
		graph export "$Graphs/MotherBMI.eps", as(eps) replace
		restore
	}	

	gen lowheight=height<157.48
	replace lowheight=. if height==.
	gen lowweight=bmi<18.5
	replace lowweight=. if bmi==.
	
	estpost tab lowheight `cond'
	esttab using "$Tables/Summary/Health.xls", cells("b pct") replace
	estpost tab lowweight `cond'
	esttab using "$Tables/Summary/Health.xls", cells("b pct") append
}

if `trends'==1 {
	foreach inc in all low mid {
		if "`inc'"=="all" local cex
		else if "`inc'"=="low"|"`inc'"=="mid" local cex &income=="`inc'"	
		**************************************************************************
		*** (2f) Trends in education/fertility
		**************************************************************************
		preserve
		keep `cond'&age>15`cex'
		collapse educ `w', by(child_yob)
		sort child_yob
		twoway line educ child_yob, /* 
		*/ title("Average years of Education by Birth Cohort") scheme(s1color) /*
		*/ xtitle("DHS Birth Cohort") ytitle("Years of Education")
		graph export "$Graphs/eductrend_kids_`inc'.eps", as(eps) replace
		restore

		preserve
		keep `cond'`cex'
		bys id: gen keepcrit=_n
		keep if keepcrit==1
		collapse educf `w', by(year_birth)
		sort year_birth
		twoway line educf year_birth if year_birth>=1940&year_birth<1997, /* 
		*/ title("Average years of Education by Birth Cohort") scheme(s1color) /*
		*/ xtitle("DHS Birth Cohort") ytitle("Years of Education")
		graph export "$Graphs/eductrend_`inc'.eps", as(eps) replace
		restore

		
		foreach aa of numlist 0 35 {
			if `aa'==0 local title "Fertility (All women)"
			if `aa'==35 local title "Fertility (Women aged 35+)"
			preserve
			keep `cond'&agemay>`aa'`cex'
			bys id: gen keepcrit=_n
			keep if keepcrit==1
			collapse fert idealnumkids `w', by(year_birth)
			sort year_birth
			twoway line fert year_bi, lpattern(dash) || line idealnumkids year_birth, /*
			*/ scheme(s1color) legend(label(1 "Fertility per Woman") /*
			*/ label(2 "Desired Fertility")) title(`title') ytitle("Births per Woman")
			graph export "$Graphs/ferttrend_`aa'_`inc'.eps", as(eps) replace
			restore
		}
	}
}


********************************************************************************
**** (3) Twin predict regressions
********************************************************************************
if `twin'== 1 {
	local out "$Tables/Twin/`TwinPred'_`births'.xls"
	fvset base 1 _cou
	fvset base 1 child_yob
	
	eststo: reg twind100 $twinpredict `wt', `se'

	foreach inc in =="L" !="L"  {
		eststo: reg twind100 $twinpredict `wt' if inc_status`inc', `se'
	}
	
	local cond1 child_yob>1989
	local cond2 child_yob<=1989

	foreach condtn in cond1 cond2 {
		eststo: reg twind100 $twinpredict `wt' if ``condtn'', `se'
	}

	eststo: reg twind100 $twinpredict /*antenatal*/ prenate* `wt', `se'

	estout est1 est2 est3 est4 est5 est6 using `out', keep($twinout /*ante**/ pre*) ///
	  title("Probability of Giving Birth to Twins (DHS)") ///
	  varlabels(motherage "Age" motheragesq "Age Squared"  agefirstbirth ///
	  "Age First Birth" educf "Education (years)" educfyrs_sq  ///
	  "Education squared" height "Height" bmi "BMI") `estopt' replace ///
	  note("Notes: All specifications include a full set of year of birth and" ///
	  " country dummies, and are estimated as linear probability models. " ///
	  "Twin is multiplied by 100 for presentation.  Height is measured in cm" ///
	  " and BMI is weight in kg divided by height in metres squared. l" ///
	  " Prenatal care variables are only recoreded for recent births.  As" ///
	  " such, column (6) is estimated only for that subset of births where " ///
	  "these observations are made.")

	estimates clear
	
	*****************************************************************************
   **** (3a) Non-linear health
   *****************************************************************************
	local out "$Tables/Twin/`TwinPred'_alt.xls"
	fvset base 1 _cou
	fvset base 1 child_yob

	eststo: reg twind100 $twinpredict bmi_sq height_sq `wt', `se'
	foreach inc in =="L" !="L"  {
		eststo: reg twind100 $twinpredict bmi_sq height_sq `wt' if /*
		*/ inc_status`inc', `se'
	}
	estout est1 est2 est3 using `out', ///
	  keep($twinout bmi_sq height_sq) ///
	  title("Probability of Giving Birth to Twins (DHS)") ///
	  varlabels(motherage "Age" motheragesq "Age Squared"  agefirstbirth ///
	  "Age First Birth" educf "Education (years)" educfyrs_sq  ///
	  "Education squared" height "Height" bmi "BMI" bmi_sq "BMI squared" ///
	  height_sq "height squared") `estopt' replace

	estimates clear
	
	*****************************************************************************
   **** (3b) Z-scores
   *****************************************************************************
	local out "$Tables/Twin/`TwinPred'_Z.xls"
	fvset base 1 _cou
	fvset base 1 child_yob
	foreach var of varlist educf height bmi {
		egen `var'_sd=sd(`var')
		egen `var'_mean=mean(`var')	
		gen Z`var'=(`var'-`var'_mean)/`var'_sd
		drop `var'_sd `var'_mean
	}

	eststo: reg twind motherage motheragesq agefirstbirth Zeducf Zbmi Zheight /*
	*/ i.child_yob i.bord `wt', `se'

	drop Zbmi Zheight Zeducf
	foreach var of varlist educf height bmi {
		bys _cou: egen `var'_sd=sd(`var')
		bys _cou: egen `var'_mean=mean(`var')	
		gen Z`var'=(`var'-`var'_mean)/`var'_sd
		drop `var'_sd `var'_mean
	}
	eststo: reg twind motherage motheragesq agefirstbirth Zeducf Zbmi Zheight /*
	*/ i.child_yob i.bord `wt', `se'
	
	estout est1 est2 using `out', keep(motherage motheragesq agefirstbirth ///
	  Zeducf Zbmi Zheight) title("Probability of Giving Birth to Twins (DHS)") ///
	  varlabels(motherage "Age" motheragesq "Age Squared"  agefirstbirth ///
	  "Age First Birth" Zeducf "Education (Z-score)" educfyrs_sq  ///
	  "Education squared" height "Height" bmi "BMI" bmi_sq "BMI squared" ///
	  height_sq "height squared") `estopt' replace
	estimates clear
}

********************************************************************************
**** (4) Simple OLS of Q-Q (can then apply Altonji)
********************************************************************************
if `ols'==1 {
	local out "$Tables/OLS/QQ_ols_`births'.xls"

	gen desiredbirth=bord<=idealnumkids
	gen fertXdesired=fert*desiredbirth
	local count = 0
	foreach y of varlist $outcomes {
		qui reg `y' fert `base' $age  $S $H [pw=sweight], `se'
		reg `y' fert `base' $age [pw=sweight] if e(sample)==1, `se'
		if `count'==0 outreg2 fert $age using `out', replace
		else if `count'!=0 outreg2 fert $age using `out', append
		reg `y' fert `base' $age $S [pw=sweight] if e(sample)==1, `se'
		outreg2 fert $age $S using `out', append
		reg `y' fert `base' $age $S $H [pw=sweight], `se'
		outreg2 fert $age $S $H using `out', excel append
		reg `y' fert fertXdesired `base' $age $S $H [pw=sweight], `se'
		outreg2 fert* $age $S $H using `out', excel append

		local ++count
	}
	
	foreach inc in low mid {
		foreach y of varlist $outcomes {
			qui reg `y' fert `base' $age $S $H if income==`"`inc'"', `se'
			reg `y' fert `base' $age `wt' if income==`"`inc'"'&e(sample), `se'
			outreg2 fert $age using `out', excel append

			reg `y' fert `base' $age $S `wt' if income==`"`inc'"'&e(sample), `se'
			outreg2 fert $age $S using `out', excel append

			reg `y' fert `base' $age $S $H `wt' if income==`"`inc'"', `se'
			outreg2 fert $age $S $H using `out', excel append

			reg `y' fert fertXdesired `base' $age $S $H `wt' /*
			*/ if income==`"`inc'"', `se'
			outreg2 fert* $age $S $H using `out', excel append
		}
	}
}

********************************************************************************
**** (5) IV (using twin at order n), subsequent inclusion of twin predictors
********************************************************************************
if `IV'==1 {
	tokenize `fnames'
	foreach condition of local conditions {
		
		local n1=1
		local n2=2
		local n3=3
		local estimates
		local fstage

		local OUT "$Tables/IV/`1'"

		foreach n in `gplus' {
			preserve
			keep `cond'&`condition'&`n'_plus==1			

			foreach y of varlist $outcomes {
				eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt',    /*
				*/ `se' savefirst savefp(f`n3')
				eststo: ivreg2 `y' `base' $age $H (fert=twin_`n'_fam) `wt'        /*
				*/ if e(sample), `se' savefirst savefp(f`n2')
				eststo: ivreg2 `y' `base' (fert=twin_`n'_fam) `wt' if e(sample),  /*
				*/ `se' savefirst savefp(f`n1')

				local estimates `estimates'  est`n3' est`n2' est`n1' 
				local fstage `fstage' f`n1'fert f`n2'fert f`n3'fert
				local n1=`n1'+3
				local n2=`n2'+3
				local n3=`n3'+3
			}
			restore
		}

		estout `estimates' using "`OUT'.xls", replace `estopt' `varlab' /*
		*/ keep(fert $age $S $H)
		estout `fstage' using "`OUT'_first.xls", replace `estopt' `varlab' /*
		*/ keep(twin_* $age $S $H)

		estimates clear
		macro shift
	}
}



********************************************************************************
**** (6) IV including twins and pre-twins
********************************************************************************
if `IVtwin'==1 {
	local n1=1
	local n2=2
	local n3=3
	local estimates
	local firststage

	foreach n in `gplus' {
		local c  `cond'&`n'_plus_twins==1
		local ce `cond'&`n'_plus_twins==1&e(sample)
		foreach y of varlist $outcomes {
			eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' `c', /*
			*/ `se' savefirst savefp(f`n3')
			eststo: ivreg2 `y' `base' $age $S (fert=twin_`n'_fam) `wt' `ce',   /*
			*/ `se' savefirst savefp(f`n2')
			eststo: ivreg2 `y' `base' (fert=twin_`n'_fam) `wt' `ce',           /*
			*/ `se' savefirst savefp(f`n1')

			local estimates `estimates' est`n3' est`n2' est`n1' 
			local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
			local n1=`n1'+3
			local n2=`n2'+3
			local n3=`n3'+3
		}
	}

	estout `estimates' using "$Tables/IV/`IVt'_`births'.xls", replace ///
	keep(fert malec $age $S $H) `estopt' `varlab'

	estout `firststage' using "$Tables/IV/`IVt1'_`births'.xls", replace ///
	keep(twin_* malec $age $S $H) `estopt' `varlab' 
	
	estimates clear
}


********************************************************************************
**** (8) IV with twin threshold
********************************************************************************
if `desire'==1 {
	*gen idealbarrier=floor(idealnumkids)
	gen idealbarrier=floor(desiredfert_region)
	*gen idealbarrier=floor(desiredfert_clusterYE)
	
	local endog fert fertXthreshold
	foreach inc in all low mid F M {
		if "`inc'"=="all" local cex
		else if "`inc'"=="low"|"`inc'"=="mid" local cex &income=="`inc'"
		else if "`inc'"=="F"|"`inc'"=="M" local cex &gender=="`inc'"

		local n1=1
		local n2=2
		local n3=3
		local estimates
		local firststage

		local t=2
		foreach n in `gplus' {
			local c  `cond'&`n'_plus==1 `cex'
			local ce `cond'&`n'_plus==1&e(sample) `cex'

			preserve
			keep `c'
			gen threshold=(twin_`n'_fam==1 & idealbarrier==`t')
			gen fertXthreshold=fert*threshold
			gen desired=idealbarrier<=`t'
			
			cap gen twin`n'Xthreshold = twin_`n'_fam*threshold
			local insts twin_`n'_fam twin`n'Xthreshold

			foreach y of varlist $outcomes {
				eststo: ivreg2 `y' `base' $age $S $H desired (`endog' = `insts') /*
				*/ `wt' `c', `se' savefirst savefp(f`n3')
				eststo: ivreg2 `y' `base' $age $S desired (`endog' = `insts') /*
				*/ `wt' `ce', `se' savefirst savefp(f`n2')
				eststo: ivreg2 `y' `base' desired (`endog' = `insts') /*
				*/ `wt' `ce', `se' savefirst savefp(f`n1')

				local estimates `estimates' est`n3' est`n2' est`n1'
				local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
		
				local n1=`n1'+3
				local n2=`n2'+3
				local n3=`n3'+3
			}
			local ++t
			drop threshold fertXthreshold desired
			restore
		}

		estout `estimates' using "$Tables/IV/`IVdes'_`inc'_`births'.xls", replace ///
		 keep(fert fertXthreshold $age $S $H) `estopt' `varlab'

		estout `firststage' using "$Tables/IV/`IVdes1'_`inc'_`births'.xls", replace ///
		 keep(twin* $age $S $H) `estopt' `varlab'
	
		estimates clear
	}
}

*NOTE: for coefficients estimated separately by desire, roll back and see here.
********************************************************************************
**** (9) IV with twin threshold condition on same fertility preference
********************************************************************************
if `pref'==1 {
	local endog fert fertXthreshold

	foreach inc in all /*low mid*/ {
		if "`inc'"=="all" local cex
		else if "`inc'"=="low"|"`inc'"=="mid" local cex &income=="`inc'"

		local n1=1
		local n2=2
		local n3=3
		local estimates
		local firststage

		local t=2
		foreach n in `gplus' {
			local c  `cond'&`n'_plus==1 `cex'
			local ce `cond'&`n'_plus==1&e(sample) `cex'

			local ik idealnumkids
			
			gen threshold=(twin_`n'_fam==1 & idealnumkids==`t')
			gen fertXthreshold=fert*threshold
			
			cap gen twin`n'Xthreshold = twin_`n'_fam*threshold
			local insts twin_`n'_fam twin`n'Xthreshold

			foreach y of varlist $outcomes {
				eststo: ivreg2 `y' `base' $age $S $H `ik' (`endog' = `insts') /*
				*/ `wt' `c', `se' savefirst savefp(f`n3')
				eststo: ivreg2 `y' `base' $age $S `ik' (`endog' = `insts') /*
				*/ `wt' `ce', `se' savefirst savefp(f`n2')
				eststo: ivreg2 `y' `base' `ik' (`endog' = `insts') /*
				*/ `wt' `ce', `se' savefirst savefp(f`n1')

				local estimates `estimates' est`n3' est`n2' est`n1'
				local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
		
				local ++t
				local n1=`n1'+3
				local n2=`n2'+3
				local n3=`n3'+3
			}
			drop threshold fertXthreshold
		}

		estout `estimates' using "$Tables/IV/`IVpref'_`inc'_`births'.xls", replace ///
		 keep(fert fertXthreshold malec $age $S $H) `estopt' `varlab'

		estout `firststage' using "$Tables/IV/`IVpref1'_`inc'_`births'.xls", replace ///
		 keep(twin* malec $age $S $H) `estopt' `varlab'
	
		estimates clear
	}
}



********************************************************************************
**** (10) New results 04/01/2013.  This first section is a quick look at whether
***  truncated and non truncated fertility look similar in terms of 1st stage.
***  Also, the IMR test (pre-twins) is included as `twinoccur'
********************************************************************************
if `new'==1 {
	local n1=1
	local n2=2
	local n3=3
	local estimates

	foreach age of numlist 35 40 {
		foreach n in `gplus' {
			local c  `cond'&agemay>`age'&`n'_plus==1
			local ce `cond'&agemay>`age'&`n'_plus==1&e(sample)
			foreach y of varlist $outcomes {
				eststo: reg fert `base' $age $S $H twin_`n'_fam `wt' `c'&`y'!=., `se'
				eststo: reg fert `base' $age $S twin_`n'_fam `wt' `ce', `se'
				eststo: reg fert `base' twin_`n'_fam `wt' `ce', `se'

				local estimates `estimates' est`n3' est`n2' est`n1' 
				local n1=`n1'+3
				local n2=`n2'+3
				local n3=`n3'+3
			}
		}
	}
		
	estout `estimates' using "$Tables/New/NewFirst.xls", replace ///
	keep(twin* malec $age $S $H _contracep*) `estopt'
	
	estimates clear
}

if `twinoccur_ols'==1 {
	gen ta=age if twind==1
	bys id: egen twinage=min(ta)
	gen twinagedif=twinage-age
	
	gen treated=twinfamily>=1&twinagedif>1&twinagedif!=.
	replace treated=. if twinfamily>=1&twinagedif<1
	tab treated

	local n1=1
	local n2=2
	local n3=3
	local estimates

	replace infantmortality=infantmortality*100
	foreach n in `gplus' {
		local c  `cond'&`n'_plus==1
		local ce `cond'&`n'_plus==1&e(sample)
 		eststo: reg infantmortality `base' $age $S $H treated `wt' `c', `se'
		eststo: reg infantmortality `base' $age $S treated `wt' `ce', `se'
		eststo: reg infantmortality `base' $age treated `wt' `ce', `se'

		local estimates `estimates' est`n3' est`n2' est`n1' 
		local n1=`n1'+3
		local n2=`n2'+3
		local n3=`n3'+3
	}
	
		
	estout `estimates' using "$Tables/New/PreTwinTest_`births'.xls", replace ///
	keep(treated malec $age $S $H) `estopt'	
	estimates clear

	
}
if `twinoccur_iv'==1 {
	local n1=1
	local n2=2
	local n3=3
	local estimates
	local firststage

	foreach n in `gplus' {
		local c  `cond'&`n'_plus==1
		local ce `cond'&`n'_plus==1&e(sample)
		foreach y of varlist infantmortality {
			eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' `c', /*
			*/ `se' savefirst savefp(f`n3')
			eststo: ivreg2 `y' `base' $age $S (fert=twin_`n'_fam) `wt' `ce',   /*
			*/ `se' savefirst savefp(f`n2')
			eststo: ivreg2 `y' `base' (fert=twin_`n'_fam) `wt' `ce',           /*
			*/ `se' savefirst savefp(f`n1')

			local estimates `estimates' est`n3' est`n2' est`n1' 
			local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
			local n1=`n1'+3
			local n2=`n2'+3
			local n3=`n3'+3
		}
	}

	estout `estimates' using "$Tables/New/IMRtest_`births'.xls", replace ///
	keep(fert malec $age $S $H) `estopt' `varlab'

	estout `firststage' using "$Tables/New/IMRtest_f_`births'.xls", replace ///
	keep(twin_* malec $age $S $H) `estopt' `varlab' 
	
	estimates clear
}


********************************************************************************
**** (11) Conley et al approach
***  Here we are assuming that:
***     quality  = beta*quantity + gamma*twin + epsilon.
***     quantity = pi*twin + nu
***
***  Typical instrumental assumption is that gamma=0, but Conley et al relax
***  this so that gamma can be a small effect, or as they say, we have "prior
***  information that implies that gamma is near 0 but perhaps not exactly 0".
********************************************************************************
if `conley'==1 {
*	do $ConAdos/uci.ado
*	do $ConAdos/ltz.ado
	do "$ConAdos/plausexog.ado"

	*****************************************************************************
	*** (11a) Union of Confidence Intervals (have now removed $S and $H)
	*****************************************************************************	
	matrix conbounds = J(5,4,1)
	local ii=3
	foreach n in `gplus' {
		*local c `cond'&`n'_plus==1&income=="`inc'"
		local c `cond'&`n'_plus==1

		reg school_zscore fert `base' $age `c'
		outreg2 fert using "$Tables/Conley/ConleyReg.xls", excel append		
		reg school_zscore fert twin_`n'_fam `base' $age `c'
		outreg2 twin_`n'_fam fert using "$Tables/Conley/ConleyReg.xls", excel append
		local estimate `=_b[twin_`n'_fam]'

		foreach num of numlist 1 /*2*/ {
			dis "estimating for `num' times the estimated coefficient on twins"
			local est2=`estimate'*`num'
			plausexog uci school_zscore `base' $age (fert = twin_`n'_fam) `c', /*
			*/ gmin(0) gmax(`est2') grid(2) level(.95) robust
		}
		mat conbounds[`ii',1]=e(lb_fert)
		mat conbounds[`ii',2]=e(ub_fert)		
		**************************************************************************
		*** (11b) Local to Zero Approach
		**************************************************************************
		local items = `e(numvars)'
		matrix omega_eta = J(`items',`items',0)
		matrix omega_eta[1,1] = (`estimate'/sqrt(12))^2
		matrix mu_eta = J(`items',1,0)
		matrix mu_eta[1,1] = `estimate'/2

		foreach num of numlist 1(1)5 {
			matrix om`num'=omega_eta
			matrix om`num'[1,1] = ((`num'/5)*`estimate'/sqrt(12))^2
			matrix mu`num'=mu_eta
			matrix mu`num'[1,1]= (`num'/5)*`estimate'/2
		}

		foreach num of numlist 1(1)5{
			local nd`num'=(`num'/5)*`estimate'
		}
		
		plausexog ltz school_zscore `base' $age (fert = twin_`n'_fam) `c', /*
		*/ omega(omega_eta) mu(mu_eta) level(0.95) robust graph(fert) /*
		*/ graphomega(om1 om2 om3 om4 om5) graphmu(mu1 mu2 mu3 mu4 mu5) /*
		*/ graphdelta(`nd1' `nd2' `nd3' `nd4' `nd5')
		graph export "$Graphs/Conley/LTZ_`n'.eps", as(eps) replace

		mat conbounds[`ii',3]=_b[fert]-1.96*_se[fert]
		mat conbounds[`ii',4]=_b[fert]+1.96*_se[fert]

		mat conbounds[5,`ii']=`estimate'
		local ++ii
		
		mat colnames conbounds = LowerBound UpperBound LowerBound UpperBound
		mat rownames conbounds = TwoPlus ThreePlus FourPlus FivePlus deltas
	}
	*****************************************************************************
	*** (11c) Write Conley et al results to file
	*****************************************************************************
	mat2txt, matrix(conbounds) saving("$Tables/Conley/ConleyResults.txt") /*
		*/ format(%6.4f) replace
}

********************************************************************************
*** (12) Is twins crossing desired threshold related to family characteristics?
*** First version compares twins crossing threshold to all families, second only
*** to other twin families (more reasonable).
********************************************************************************
if `thresholdtest'==1 {
	gen threshold2=(twin_two_fam==1   & idealnumkids==2)
	gen threshold3=(twin_three_fam==1 & idealnumkids==3)
	gen threshold4=(twin_four_fam==1  & idealnumkids==4)
	gen threshold5=(twin_five_fam==1  & idealnumkids==5)	

	gen threshold=threshold2+threshold3+threshold4+threshold5

	replace threshold=threshold*100
	sum threshold*

/*	reg threshold $twinpredict `wt', `se'
	outreg2 $twinout using $Tables/crossing.xls, excel replace
	test educf educfyrs_sq height bmi
	local Ftestall=r(p)
	
	local t=2
	foreach num in `gplus' {
		reg threshold`t' $twinpredict `wt' if `num'_plus==1, `se'
		outreg2 $twinout using $Tables/crossing.xls, excel append
		test educf educfyrs_sq height bmi
		local Ftest`num'=r(p)
		
		local ++t
	}
*/
	preserve
	keep if twinfamily>0&twinfamily!=.
	*collapse threshold motherage motheragesq agefirstbirth educf educfyrs_sq /*
	**/ height bmi child_yob _cou sweight, by(id)
	*replace child_yob=round(child_yob)
	reg threshold $twinpredict `wt', `se'
	outreg2 $twinout using $Tables/crossing_twins.xls, excel replace
	test educf educfyrs_sq height bmi
	local Ftwinall=r(p)
	restore
/*
	local t=2
	foreach num in `gplus' {
		reg threshold`t' $twinpredict `wt' if twinfamily>0&twinfamily!=.&`num'_plus==1, `se'
		outreg2 $twinout using $Tables/crossing_twins.xls, excel append
		test educf educfyrs_sq height bmi
		local Ftwin`num'=r(p)
		
		local ++t
	}	
	
	dis "`Ftestall' `Ftesttwo' `Ftestthree' `Ftestfour' `Ftestfive'"
	dis "`Ftwinall' `Ftwintwo' `Ftwinthree' `Ftwinfour' `Ftwinfive'"

	

	gen fertshortfall=fert-idealnumkids
	reg idealnumkids $twinpredict `wt', `se'
	outreg2 $twinout using $Tables/desiredtest.tex, tex(pretty) replace
	reg fertshortfall $twinpredict `wt', `se'
	outreg2 $twinout using $Tables/desiredtest.tex, tex(pretty) append
*/	
	/*
	gen lowinc=income=="low"
	cap log close
	log using "$Base/Results/Sum/Desired/DesiredSum.txt", text replace
	foreach num of numlist -1 0 1 {
		sum fert idealnumkids agemay educf height bmi educ school_zscore /*
		*/ noeduc highschool infantmortality childmortality agefirstbirth /*
		*/ motherage lowinc if idealfam==`num'
	}
	cap log close
	*/
}

********************************************************************************
**** (13) Twin treated versus untreated balance
********************************************************************************
if `balance'==1 {
	estimates clear
	do "$Source/myttests.ado"


	foreach opt in /*child*/ mother {
		gen Treated=1 if twinfamily>0&twinfamily!=.
		replace Treated=0 if twinfamily==0
		tab wealth, gen(_wealth)


		if `"`opt'"'=="mother" {
			collapse $balance _wealth* Treated, by(id)
		}

		lab var fert "Total Fertilty"
		lab var idealnumkids "Desired Fertility"
		lab var agefirstbirth "Age First Birth"
		lab var educf "Mother's Education"
		lab var educp "Father's Education"
		lab var height "Mother's Height"
		lab var underweight "Pr(BMI $<$ 18.5)"
		*lab var antenatal "Number of Antenatal Checks"
		lab var prenate_doc "Prenatal care (doctor)"
		lab var prenate_nurse "Prenatal care (nurse)"		
		lab var prenate_none "Prenatal care (none)"
		lab var motherage "Mother's Age"
		lab var _wealth1 "Wealth Quintile 1"
		lab var _wealth2 "Wealth Quintile 2"
		lab var _wealth3 "Wealth Quintile 3"
		lab var _wealth4 "Wealth Quintile 4"
		lab var _wealth5 "Wealth Quintile 5"
		lab var childmortality "Child Mortality"
		lab var infantmortality "Infant Mortality"		

		
		myttests $balance _wealth*, by(Treated)
		ereturn list
		*esttab using $Tables/Balance.xls, nomtitle nonumbers noobs ///
		*  cells("mu_1(fmt(a3)) mu_2 d(star pvalue(d_p))" " . . d_se(par)") replace

		esttab using $Tables/Balance_`opt'.tex, nomtitle nonumbers noobs ///
		  booktabs title(Test of Balance of Observables: Twins versus Non-twins ///
		  \label{TWINtab:comp}) label ///
		  cells("mu_1(fmt(a3)) mu_2 d(star pvalue(d_p))" " . . d_se(par)") replace

	}
}

********************************************************************************
**** (15) Run for each country
********************************************************************************
if `country'==1 {

	levelsof country
	local countries = `"`r(levels)'"'

	local n1=1
	local estimates
	local firststage
	local colnames

	local base malec _yb* _age* _contracep* `add'
	
	foreach cc of local countries {
		preserve
		keep if country=="`cc'"
		count
		if `r(N)'== 0 {
			restore
			exit
		}

		foreach n in `gplus' {
			local c  `cond'&`n'_plus==1
			foreach y of varlist $outcomes {
				eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' `c', /*
				*/ `se' savefirst savefp(f`n1')

				local estimates `estimates' est`n1' 
				local firststage `firststage' f`n1'fert
				local colnames `cc'
				local ++n1
			}
		}
		restore	
	}	

	estout `estimates' using "$Tables/IV/Countries_`births'.xls", replace ///
	keep(fert malec $age $S $H) mlabels(`colnames') `estopt' `varlab'

	estout `firststage' using "$Tables/IV/Countries_f_`births'.xls", replace ///
	keep(twin_* malec $age $S $H) mlabels(`colnames') `estopt' `varlab' 
	
	estimates clear	
}
