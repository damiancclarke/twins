/* Regressions 3.01              damiancclarke             yyyy-mm-dd:2013-04-15
*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|----8
*/

/* This file contains all regression results that are being used in the Twin 
Instrument paper.  These include
	- Summary.xls (sum stats)
	- Summary_Birthorder.xls
   - Twin_Predict.xls
   - ...

This do file uses as input the data file DHS_Twins, which is generated by the
file Twin_Setup.do.  Currently it includes all DHS files available up until 
October 2013.  Files are downloaded and imported to Stata using the files 
DHS_Import.py and DHS_Multicountry.do.

Last edit:
* December 17th, 2013: considerable rewrite based on comments in 22 Nov email.
Can revert by going back to git commit Nov 11 2013.
* September 12th, 2013: Address Paul Dev's comment about treatment
* August 5th, 2013: Update figures and tables based on Sonia's comme-
nts on early draft.
*/


clear all
version 11.2
cap log close
set more off
set mem 2000m

*******************************************************************************
*** (0) Globals and Locals
*******************************************************************************
* DIRECTORIES
global Base "~/investigacion/Activa/Twins"
global Data "$Base/Data"
global Results "$Base/Results"
global Tables "$Results/Outreg"
global Graphs "$Results/Graphs"
global Log "$Base/Log"


* VARIABLES
global outcomes school_zscore noeduc /*highschool*/ childmortal infantmortal
global sumstats bord fert idealnumkids agemay educf height bmi educ /*
*/ school_zscore noeduc /*highschool*/ infantmortality childmortality
global twinpredict agemay magesq agefirstbirth educf educfyrs_sq height bmi /*
*/ i.child_yob i._cou 
global twinout agemay magesq agefirstbirth educf educfyrs_sq height bmi
global base malec i._cou i.year_birth i.age
global age agemay magesq agefirstbirth
global S educf educfyrs_sq
global H height bmi 


* SPECIFICATIONS
local se robust
local wt [pw=sweight]
local cond if agefirstbirth>=15&age<19


* FILE NAMES
local Sum Summary
local SumBord Summary_Birthorder
local TwinPred Twin_Predict
local IV Base_IV
local IV1 Base_IV_firststage
local IVinc Income_IV
local IVinc1 Income_IV_firststage
local IVdes Desire_IV
local IVdes1 Desire_IV_firststage

local idealsum Summary_IdealSize
local twins Twin_Predict


* FIGURES
local famsize famsize
local famsize_e famsize_exceed
local twinbord twinbybord
local idealfam idealfamsize


* REPEATED OPTIONS
local estopt cells(b(star fmt(%-9.3f)) se(fmt(%-9.3f) par)) /*
*/ stats (r2 N, fmt(%9.2f %9.0g)) starlevel ("*" 0.10 "**" 0.05 "***" 0.01)
local varlab varlabels(malec "Male Child" agemay "Mother's age" magesq /*
*/ "Mother's Age Squared" agefirstbirth "Age First Birth" educf /*
*/ "Mother's Education" educfyrs_sq "Mother's Education Squared" height /*
*/ "Height" bmi "BMI")


*SWITCHES (1 if run, else not run)
local sumstats 0
  local graphs 0
local twin 0
local ols done
local IV 1
local IVtwin 0
local income 1
local desire 0

*******************************************************************************
*** (1) Setup (+ discretionary choices)
*******************************************************************************
log using "$Log/Twin_Regressions.log", text replace
use "$Data/DHS_twins"

replace bmi=. if bmi>50
replace height=. if height>240
replace height=. if height<80
replace educ=. if age<6
replace educ=. if educ>25
replace educf=. if educf>25

drop if twinfamily==3|twinfamily==4
keep if _merge==3


foreach ado in ivreg2 outreg2 {
	cap which `ado'
	if _rc!=0 ssc install `ado'
}

*******************************************************************************
*** (2) Summary Stats
*******************************************************************************
if `sumstats'==1 {

	if c(os)=="Windows" local format png
	else if c(os)=="Unix" local format eps

	***************************************************************************
	*** (2a) Graphical
	*** graph 1: total births by family type (twins vs non-twins)
	*** graph 2: total births by family type for families who exceed desired
	*** graph 3: Proportion of twins by birth order
	*** graph 4: Desired family size
	*** graphs 5-7: Desired family size by mother's characteristics
	***************************************************************************
	if `graphs'==1 {
	twoway kdensity fert if twinfamily==1, lpattern(dash) bw(2) || ///
	  kdensity fert if twinfamily==0, bw(2) scheme(s1color) ytitle("Density") ///
	  legend(label(1 "Twin Family") label(2 "Singleton Family")) ///
	  title("Total births by Family Type") xtitle("total children ever born") 
	graph save "$Graphs/`famsize'", replace
	graph export "$Graphs/`famsize'.`format'", as(`format') replace


	twoway kdensity fert if twinfamily==1 & fert > idealnumkids, ///
	  bw(2) lpattern(dash) || kdensity fert if twinfamily==0 & ///
	  fert > idealnumkids & twin_bord >= idealnumkids, bw(2) scheme(s1color) ///
	  legend(label(1 "Twin Family") label(2 "Singleton Family")) ///
	  ytitle("Density") title("Total births by Family Type") ///
	  xtitle("total children ever born") ///
	  subtitle("For families who exceed desired family size")
	graph save "$Graphs/`famsize_e'", replace
	graph export "$Graphs/`famsize_e'.`format'", as(`format') replace

	
	local note1 "Single births are 1-frac(twins). "
	local note2 "Total fraction of twins is represented by the solid line."
	local gnote "`note1' `note2'"
	preserve
	collapse twind [pw=sweight], by(bord)
	line twind bord if bord<11, lpattern(dash) title("Twinning by birth order") ///
	  ytitle("Fraction twins") xtitle("Birth Order") yline(0.0189) ///
	  note(`gnote') scheme(s1color)
	graph save "$Graphs/`twinbord'", replace
	graph export "$Graphs/`twinbord'.`format'", as(`format') replace
	restore

	
	local n1 "Total sample of families is 1,416,924.  2.61% of families report "
	local n2 "'up to god', and 4.39% provide"
	local n3 "a non-numeric response. These are classed as 10+ in graphical output."	
	preserve
	collapse idealnumkids [pw=sweight], by(id)
	gen idealnum=idealnumkids if idealnumkids<=10
	replace idealnum=10 if idealnumkids>10 & idealnumkids!=.
	lab def n 0 "0" 1 "1" 2 "2" 3 "3" 4 "4" 5 "5" 6 "6" 7 "7" 8 "8" 9 "9" 10 "10+"
	lab val idealnum n
	hist idealnum,  note("`n1' `n2'" "`n3'") frac scheme(s1color) ///
	  xtitle("Ideal Family Size") title("Self Reported Ideal Family Size") ///
	  xla(0/10, valuelabel) bcolor(navy)
	graph save "$Graphs/`idealfam'", replace
	graph export "$Graphs/`idealfam'.`format'", as(`format') replace
	restore

	
	foreach c of varlist agemay agefirstbirth fert {
		preserve
		if `"`c'"'=="agemay" {
			local cond agemay>=15&agemay<=45
			local char "Age of mother at time of question"
		}
		else if `"`c'"'=="agefirstbirth" {
			local cond agefirstbirth>=15&agefirstbirth<45
			local char "Age of Mother at First birth"
		}
		else if `"`c'"'=="fert"{
			local cond fert<=10
			local char "Total births at time of question"
		}
		bys id: gen num=_n
		keep if num==1
		collapse idealnumkids [pw=sweight], by(`c')
		line idealnumkids `c' if `cond', title("Ideal Family Size by `char'") ///
		  scheme(s1color) xtitle("`char'") ytitle("Average Desired Family Size")
	   graph save "$Graphs/idealfam_`c'", replace
	   graph export "$Graphs/idealfam_`c'.`format'", as(`format') replace
		restore
	}
	}

	***************************************************************************
	*** (2b) Numerical:
	*** characteristics of families who want different ideal sizes (P.Dev idea)
	***************************************************************************
*	areg idealnumkids educf_* agefirstbirth poor1 height bmi i.year_birth /*
*	*/ i.child_yob i.agemay [pw=sweight], a(_cou) `se'
*	outreg2 educf_0 educf_1_4 educf_5_6 educf_7_10 agefirstbirth poor1 /*
*	*/ educ height bmi using "$Tables/fampref.xls", excel replace	


	***************************************************************************
	*** (2c) Tables
	***************************************************************************
	* (A) By twins
	local opts cells("count mean sd min max")
	
	gen cat="Low Inc, Singleton" if twind==0 & income=="low"
	replace cat="Low Inc, Twin" if twind==1 & income=="low"
	replace cat="Mid Inc, Single" if twind==0 & income=="mid"
	replace cat="Mid Inc, Twin" if twind==1 & income=="mid"
	encode cat, gen(catnum)
	
	local nums "Number of Children"
	foreach num of numlist 1(1)4 {
		cap drop count
		gen count = 1
		replace count=. if catnum!=`num'
		foreach var of local sumstats {
			replace count=. if `var'==.
		}
		count if count==1
		local nums "`nums' `r(N)'        "
	}

	sum twind if income=="low"
	scalar lt = `r(mean)'
	scalar ls = `r(sd)'
	sum twind if income=="mid"
	scalar mt = `r(mean)'
	scalar ms = `r(sd)'
	local twinlow "`=scalar(lt)' (`=scalar(ls)')"
	local twinmid "`=scalar(mt)' (`=scalar(ms)')"
	
	estpost tabstat $sumstats, by(cat) statistics(mean sd) listwise ///
	 columns(statistics)
	estout using "$Tables/Summary/`Sum'.xls", unstack cells(mean sd(par)) ///
	  delimit(";") varlabels(bord "Birth Order" fert "Fertility" idealnumkids ///
	  "Ideal family size" agemay "Age" educf "Education" height "Height" bmi ///
	  "BMI" educ "Education (Years)" school_zscore "Education (Z-Score)" ///
	  noeduc "No Education (%)" infantmortality "Infant Mortality" ///
	  childmortality "Child Mortality") replace ///
	  note("`nums'" ///
	 "Fraction twin low income: `twinlow', middle income: `twinmid'" ///
	 "Notes: Education is reported as total years attained, attendance is a " ///
	 "binary variable indicating current attendance status. Infant mortality" ///
	 " refers to the proportion of children who die before 1 year of age, "   ///
	 "while child mortality refers to the proportion who die before 5 years " ///
	 "years.  Maternal height is reported in cm.  For a full list of country" ///
	 "and years of survey see appendix table REF.")


	*(B) By birthorder
	foreach num of numlist 1(1)10 {
	   estpost sum $sumstats if bord==`num'&age<19
	   estout using "$Tables/`SumBord'.xls", append `opts' title("Birth order=`num'")
	   *(C) Country-year observations
	   tabout _cou _year using "$Tables/country_year.xls", replace
	}
	*(C) Desired versus actual family size
	local cond1 age<19&agefirstbirth>14&idealnumkids!=.
	local out "$Tables/`idealsum'.txt"
	cap rm `out'

	tabout idealfam if `cond' using `out' , c(freq col)
	tabout idealfam if `cond'&agemay<=35 using `out', c(freq col) append
	tabout idealfam if `cond'&agemay>35 using `out', c(freq col) append
	tabout idealfam if `cond'&income=="low" using `out', c(freq col) append
	tabout idealfam if `cond'&income=="mid" using `out', c(freq col) append
}

********************************************************************************
**** (3) Twin predict regressions
********************************************************************************
if `twin'== 1 {
	
	fvset base 1 _cou
	fvset base 1 child_yob
	
	eststo: reg twind100 $twinpredict `wt', `se'

	foreach inc in low mid {
		eststo: reg twind100 $twinpredict `wt' if income=="`inc'", `se'
	}
	
	local cond1 child_yob>1989
	local cond2 child_yob<=1989

	foreach condtn in cond1 cond2 {
		eststo: reg twind100 $twinpredict `wt' if ``condtn'', `se'
	}

	estout est1 est2 est3 est4 est5 using "$Tables/Twin/`TwinPred'.xls", ///
	  keep($twinout) title("Probability of Giving Birth to Twins (DHS)") ///
	  varlabels(agemay "Age" magesq "Age Squared" agefirstbirth ///
	  "Age First Birth" educf "Education" educfyrs_sq "Educ Squared" ///
	  height "Height" bmi "BMI") `estopt' replace ///
	  note("Notes: All specifications include a full set of year of birth and" ///
	  " country dummies, and are estimated as linear probability models. " ///
	  "Twin is multiplied by 100 for presentation.  Height is measured in cm" ///
	  " and BMI is weight in kg divided by height in cm squared.")

	estimates clear
}

********************************************************************************
**** (4) Simple OLS of Q-Q (can then apply Altonji)
********************************************************************************
if `"`ols'"'=="yes" {
	cap rm "$Results/Outreg/QQ_ols.xls"
	cap rm "$Results/Outreg/QQ_ols.txt"
	local out "$Results/Outreg/QQ_ols.xls"

	foreach y of varlist $outcomes {
		qui reg `y' fert $cont $S $H [pw=sweight], cluster(_cou)
		reg `y' fert $cont [pw=sweight] if e(sample)==1, cluster(_cou)
		outreg2 fert $contout using `out', excel append
		reg `y' fert $cont $S [pw=sweight] if e(sample)==1, cluster(_cou)
		outreg2 fert $contout $S using `out', excel append
		reg `y' fert $cont $S $H [pw=sweight], cluster(_cou)	
		outreg2 fert $contout $S $H using `out', excel append
	}

	foreach inc in low mid {
		foreach y of varlist $outcomes {
			qui reg `y' fert $cont $S $H if income==`"`inc'"', cluster(_cou)
			reg `y' fert $cont [pw=sweight] if income==`"`inc'"'&e(sample)/*
			*/, cluster(_cou)
			outreg2 fert $contout using `out', excel append

			reg `y' fert $cont $S [pw=sweight] if income==`"`inc'"'&e(sample),/*
			*/ cluster(_cou)
			outreg2 fert $contout $S using `out', excel append

			reg `y' fert $cont $S $H [pw=sweight] if income==`"`inc'"',/*
			*/ cluster(_cou)	
			outreg2 fert $contout $S $H using `out', excel append
		}
	}
}

********************************************************************************
**** (5) IV (using twin at order n), subsequent inclusion of twin predictors
********************************************************************************
if `IV'==1 {
   tab _cou, gen(_country)
   tab year_birth, gen(_yb)
   tab age, gen(_age)
	local base malec _country* _yb* _age*


	local n1=1
	local n2=2
	local n3=3
	local estimates
	local firststage

	foreach n in two three four five {
		local c  `cond'&`n'_plus==1
		local ce `cond'&`n'_plus==1&e(sample)
		foreach y of varlist $outcomes {
			eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' `c', /*
			*/ `se' savefirst savefp(f`n3')
			eststo: ivreg2 `y' `base' $age $S (fert=twin_`n'_fam) `wt' `ce',   /*
			*/ `se' savefirst savefp(f`n2')
			eststo: ivreg2 `y' `base' (fert=twin_`n'_fam) `wt' `ce',           /*
			*/ `se' savefirst savefp(f`n1')

			local estimates `estimates' est`n3' est`n2' est`n1' 
			local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
			local n1=`n1'+3
			local n2=`n2'+3
			local n3=`n3'+3
		}
	}

	estout `estimates' using "$Tables/IV/`IV'.xls", replace ///
	keep(fert malec $age $S $H) `estopt' `varlab'

	estout `firststage' using "$Tables/IV/`IV1'.xls", replace ///
	keep(twin_* malec $age $S $H) `estopt' `varlab' 
	
	estimates clear
}

********************************************************************************
**** (6) IV including twins and pre-twins
********************************************************************************
if `IVtwin'==1 {
	
}

********************************************************************************
**** (7) IV by income
********************************************************************************
if `income'==1 {
	cap drop _country* _yb* _age*
	
   tab _cou, gen(_country)
   tab year_birth, gen(_yb)
   tab age, gen(_age)
	local base malec _country* _yb* _age*


	foreach inc in low mid {
		local n1=1
		local n2=2
		local n3=3
		local estimates
		local firststage

		foreach n in two three four five {
			local c  `cond'&`n'_plus==1&income=="`inc'"
			local ce `cond'&`n'_plus==1&income=="`inc'"&e(sample)
			foreach y of varlist $outcomes {
				eststo: ivreg2 `y' `base' $age $S $H (fert=twin_`n'_fam) `wt' `c', /*
				*/ `se' savefirst savefp(f`n3')
				eststo: ivreg2 `y' `base' $age $S (fert=twin_`n'_fam) `wt' `ce', /*
				*/ `se' savefirst savefp(f`n2')
				eststo: ivreg2 `y' `base' (fert=twin_`n'_fam) `wt' `ce', /*
				*/ `se' savefirst savefp(f`n1')


				local estimates `estimates' est`n3' est`n2' est`n1' 
				local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
				local n1=`n1'+3
				local n2=`n2'+3
				local n3=`n3'+3
			}
		}

	estout `estimates' using "$Tables/IV/`IVinc'_`inc'.xls", replace ///
	keep(fert malec $age $S $H) `estopt' `varlab'

	estout `firststage' using "$Tables/IV/`IVinc1'_`inc'.xls", replace ///
	keep(twin_* malec $age $S $H) `estopt' `varlab'
	
	estimates clear
	}
}

********************************************************************************
**** (8) IV with > desired fertility
********************************************************************************
if `desire'==1 {
	tab _cou, gen(_country)
	tab year_birth, gen(_yb)
	tab age, gen(_age)
	local base malec _country* _yb* _age*
	local endog fert fertXthreshold

	foreach inc in all low mid {
		if "`inc'"=="all" local cex
		else if "`inc'"=="low"|"`inc'"=="mid" local cex income=="`inc'"

		local n1=1
		local n2=2
		local n3=3
		local estimates
		local firststage

		local t=2
		foreach n in two three four five {
			local c  `cond'&`n'_plus==1&`cex'
			local ce `cond'&`n'_plus==1&e(sample)&`cex'

			gen threshold=(twin_`n'_fam==1 & idealnumkids<=`t')
			gen fertXthreshold=fert*threshold
			gen twin`n'Xthreshold = twin_`n'_fam*threshold
			local insts twin_`n'_fam twin`n'Xthreshold

			foreach y of varlist $outcomes {
				eststo: ivreg2 `y' `base' $age $S $H (`endog' = `insts') /*
				*/ `wt' `c', `se' savefirst savefp(f`n3')
				eststo: ivreg2 `y' `base' $age $S (`endog' = `insts') /*
				*/ `wt' `ce', `se' savefirst savefp(f`n2')
				eststo: ivreg2 `y' `base' (`endog' = `insts') /*
				*/ `wt' `ce', `se' savefirst savefp(f`n1')

				local estimates `estimates' est`n3' est`n2' est`n1'
				local firststage `firststage' f`n1'fert f`n2'fert f`n3'fert
		
				local ++t
				local n1=`n1'+3
				local n2=`n2'+3
				local n3=`n3'+3
			}
			drop threshold fertXthreshold
		}

		estout `estimates' using "$Tables/IV/`IVdes'_`inc'.xls", replace ///
		  keep(fert fertXthreshold malec $age $S $H) `estopt' `varlab'

		estout `firststage' using "$Tables/IV/`IVdes1'_`inc'.xls", replace ///
		  keep(twin* malec $age $S $H) `estopt' `varlab'
	
		estimates clear
	}
}
